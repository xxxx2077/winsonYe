{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to winson's coding space!</p>"},{"location":"about/","title":"About","text":"<p>Welcome to winson's coding space!</p>"},{"location":"algorithm/algorithm_basic/","title":"\u7b97\u6cd5\u57fa\u7840","text":""},{"location":"algorithm/algorithm_basic/#_2","title":"\u4e8c\u5206\u67e5\u627e","text":""},{"location":"algorithm/algorithm_basic/#x","title":"\u67e5\u627e\u5927\u4e8e\u7b49\u4e8ex \u7684\u7b2c\u4e00\u4e2a\u6570","text":"<p>a[mid] &gt;= target\u8bf4\u660e\u8981\u5bfb\u627e\u7684\u6570\u5728[l, mid]\u4e2d</p> <p>a[mid] &lt; target\u8bf4\u660e\u8981\u5bfb\u627e\u7684\u6570\u5728(mid, n - 1]\u4e2d</p> <pre><code>// \u533a\u95f4[l, r]\u88ab\u5212\u5206\u6210[l, mid]\u548c[mid + 1, r]\u65f6\u4f7f\u7528\uff1a\nint bsearch_1(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r &gt;&gt; 1;\n        if (a[mid] &lt; target) l = mid + 1;    // check()\u5224\u65admid\u662f\u5426\u6ee1\u8db3\u6027\u8d28\n        else r = mid ;\n    }\n    return l;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#x_1","title":"\u67e5\u627e\u5c0f\u4e8e\u7b49\u4e8ex \u7684\u6700\u540e\u4e00\u4e2a\u6570","text":"<p>a[mid] &gt;= target\u8bf4\u660e\u8981\u5bfb\u627e\u7684\u6570\u5728[l, mid]\u4e2d</p> <p>a[mid] &lt; target\u8bf4\u660e\u8981\u5bfb\u627e\u7684\u6570\u5728(mid, n - 1]\u4e2d</p> <pre><code>// \u533a\u95f4[l, r]\u88ab\u5212\u5206\u6210[l, mid - 1]\u548c[mid, r]\u65f6\u4f7f\u7528\uff1a\nint bsearch_2(int l, int r)\n{\n    while (l &lt; r)\n    {\n        int mid = l + r + 1 &gt;&gt; 1;\n        if (a[mid] &gt; target) r = mid - 1;\n        else l = mid;\n    }\n    return l;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#_3","title":"\u8bb0\u5fc6\u53e3\u8bc0","text":"<p>\u5927\u4e8e\u7b49\u4e8ex\uff1a</p> <ul> <li>r = mid</li> <li>\u56e0\u4e3a\u662f\u5927\u4e8e\uff0c\u6240\u4ee5l \u662f mid + 1</li> </ul> <p>\u5c0f\u4e8e\u7b49\u4e8ex\uff1a</p> <ul> <li>l = mid</li> <li>\u56e0\u4e3a\u662f\u5c0f\u4e8e\uff0c\u6240\u4ee5r \u662fmid - 1</li> </ul>"},{"location":"algorithm/algorithm_basic/#_4","title":"\u52a8\u6001\u89c4\u5212","text":"<p>\u52a8\u6001\u89c4\u5212\u53ef\u6839\u636e\u4ee5\u4e0b\u4e24\u4e2a\u7ef4\u5ea6\u601d\u8003\uff1a</p> <ol> <li>\u72b6\u6001\u8868\u793a</li> <li>\u96c6\u5408</li> <li>\u5c5e\u6027</li> <li>\u72b6\u6001\u8ba1\u7b97</li> <li>\u65f6\u95f4\u590d\u6742\u5ea6\u8ba1\u7b97\uff1a\u72b6\u6001\u6570 * \u72b6\u6001\u8f6c\u79fb\u8ba1\u7b97\u6b21\u6570</li> </ol>"},{"location":"algorithm/algorithm_basic/#_5","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u7ed9\u51faN\u4e2a\u7269\u54c1\u7684\u4f53\u79ef$v_i$\u548c\u4ef7\u503c$w_i$\uff0c\u4ee5\u53ca\u80cc\u5305\u7684\u603b\u5bb9\u91cfV</p> <p>\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> <p>\u8f93\u51fa\u6700\u5927\u4ef7\u503c\u3002</p>"},{"location":"algorithm/algorithm_basic/#01","title":"01\u80cc\u5305\u95ee\u9898","text":"<p>\u6a21\u677f\u9898\uff1ahttps://www.acwing.com/problem/content/2/</p> <p>\u7279\u70b9\uff1a\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <p>\u7531\u4e8e\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff0c\u90a3\u4e48\u5206\u7c7b\u8ba8\u8bba\u4e3a\uff1a</p> <ol> <li>\u7b2ci\u4e2a\u7269\u54c1\u4e0d\u88c5\u8fdb\u4e66\u5305\uff1a<code>f[i][j]=f[i - 1][j]</code></li> <li>\u7b2ci\u4e2a\u7269\u54c1\u88c5\u8fdb\u4e66\u5305\uff1a<code>f[i][j] =f[i - 1][j - v[i]] + w[i]</code> </li> </ol> <p><code>f[i][j]\u53d6\u4ee5\u4e0a\u7ed3\u679c\u7684\u6700\u5927\u503cmax\u5373\u53ef\uff0c\u5373f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i])</code></p>"},{"location":"algorithm/algorithm_basic/#_6","title":"\u6734\u7d20\u7248","text":"<p>\u91c7\u7528\u4e8c\u7ef4\u6570\u7ec4<code>f[i][j]</code>\u4f5c\u4e3a\u72b6\u6001\u8868\u8fbe\u5f0f\uff0c\u8868\u793a\u524di\u4e2a\u7269\u54c1\u80cc\u5305\u5bb9\u79ef\u4e3aj\u7684\u6240\u6709\u9009\u62e9</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, V = 1010;\n//  f[N][V] \u72b6\u6001\u8868\u8fbe\u5f0f\n//  \u96c6\u5408\uff1af[i][j] \u8868\u793a \u524di\u4e2a\u7269\u54c1\u80cc\u5305\u5bb9\u79ef\u4e3aj\u7684\u6240\u6709\u9009\u62e9\n//  \u5c5e\u6027\uff1a\u6240\u6709\u9009\u62e9\u7684\u4ef7\u503c\u6700\u5927\u503c\nint f[N][V];\n\n// v[i] \u8bb0\u5f55\u6bcf\u4e2a\u7269\u54c1\u7684\u4f53\u79ef\uff0cw[i] \u8bb0\u5f55\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u503c\nint v[N],w[N];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    //  \u8f93\u5165    \n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    }\n\n    //  \u5f00\u59cb\u6c42\u89e3\n    //  f[0][0~m]\u90fd\u662f0\uff0c\u56e0\u4e3a\u7b2c0\u4e2a\u7269\u54c1\u6ca1\u6709\u4ef7\u503c\u53ef\u8a00\n    //  \u4ece\u7b2c1\u4e2a\u7269\u54c1\u5f00\u59cb\u8ba1\u7b97\n    for(int i = 1; i &lt;= n; i++){\n        //  \u904d\u5386\u6bcf\u4e2a\u5bb9\u79ef\n        for(int j = 0; j &lt;= m; j++){\n            //  \u5982\u679c\u4e0d\u9009\u7b2ci\u4e2a\u7269\u54c1\n            f[i][j] = f[i - 1][j];\n            //  \u5982\u679c\u9009\u62e9\u7b2ci\u4e2a\u7269\u54c1\n            //  \u5224\u65ad\u5f53\u524d\u5bb9\u79ef\u662f\u5426\u80fd\u5bb9\u7eb3\u7b2ci\u4e2a\u7269\u54c1\n            if(j &gt;= v[i])   \n                // f[i - 1][j - v[i]]\u8868\u793a\u9009\u62e9\u7b2ci\u4e2a\u7269\u54c1\u7684\u524d\u63d0\u4e0b\uff0c\u7b2ci - 1\u4e2a\u7269\u54c1\u7684\u4ef7\u503c\u6700\u5927\u503c\n                f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]);\n        }\n    }\n\n    //  \u8f93\u51fa\u7ed3\u679c\uff0cf[n][m]\u8868\u793a\u524dn\u4e2a\u7269\u54c1\u5bb9\u79ef\u4e3am\u7684\u4ef7\u503c\u6700\u5927\u503c\uff0c\u5373\u6211\u4eec\u95ee\u9898\u7684\u89e3\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p>"},{"location":"algorithm/algorithm_basic/#_7","title":"\u4f18\u5316\u7248","text":"<p>\u4f18\u5316\u601d\u8def\uff1a</p> <ol> <li>\u8ba1\u7b97<code>f[i]</code>\u90fd\u662f\u4f9d\u9760<code>f[i - 1]</code>\uff0c\u56e0\u6b64\u672c\u8d28\u4e0a\u53ea\u9700\u8981\u4e00\u7ef4\u6570\u7ec4\uff0c\u8fd9\u79cd\u79f0\u4e3a\u6eda\u52a8\u6570\u7ec4\uff08\u6eda\u52a8\u6570\u7ec4\uff1a\u4e8c\u7ef4\u6570\u7ec4\u8ba1\u7b97\u7684\u65f6\u5019<code>f[i]</code>\u53ea\u4f9d\u6258\u4e8e<code>f[i - 1]</code>\u7b49\u6709\u9650\u4e2a\u524d\u9a71\u6570\u7ec4\uff09</li> <li>\u904d\u5386\u5bb9\u79ef\u90fd\u662f\u4ece<code>j == 0</code>\u5f00\u59cb\uff0c\u4f46\u662f\u53c8\u6709\u5224\u65ad<code>j &gt;= v[i]</code>\u624d\u4f1a\u8ba1\u7b97<code>f[i][j] = max(f[i][j], f[i - 1][j - v[i]] + w[i]);</code>\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4ece<code>j == v[i]</code>\u5f00\u59cb</li> </ol> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a</p> <p>\u7531\u4e8e\u6eda\u52a8\u6570\u7ec4\u53ea\u6709\u4e00\u7ef4\uff0c\u56e0\u6b64<code>f[i - 1][j]</code>\u5b9e\u9645\u4e0a\u4ee5\u4e0a\u4e00\u6b21\u5b58\u50a8\u7684<code>f[j]</code>\u6765\u8868\u793a</p> <p>\u5982\u679c\u4ece\u5de6\u5f80\u53f3\u8ba1\u7b97\uff0c\u90a3\u4e48\u8ba1\u7b97<code>f[i][j]</code>\u65f6\uff0c\u7531\u4e8e<code>j - v[i] &lt;= j</code>\uff0c<code>f[j - v[i]]</code>\u5728<code>f[j]</code>\u7684\u5de6\u4fa7\uff0c\u5373\u5df2\u7ecf\u88ab\u8ba1\u7b97\u8fc7</p> <p>\u6b64\u65f6<code>f[j - v[i]]</code>\u8868\u793a\u7684\u662f<code>f[i][j - v[i]]</code>\u800c\u4e0d\u662f<code>f[i - 1][j - v[i]]</code>\uff0c\u4e0e\u9898\u610f\u4e0d\u7b26</p> <p>\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4ece\u53f3\u5f80\u5de6\u8ba1\u7b97\uff0c\u4fdd\u8bc1\u8ba1\u7b97\u987a\u5e8f<code>f[j]</code>\u65e9\u4e8e<code>f[j - v[i]]</code></p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, V = 1010;\n//  f[V] \u72b6\u6001\u8868\u8fbe\u5f0f\n//  \u96c6\u5408\uff1a\u904d\u5386\u7b2ci\u6b21\uff0cf[j] \u8868\u793a \u524di\u4e2a\u7269\u54c1\u80cc\u5305\u5bb9\u79ef\u4e3aj\u7684\u6240\u6709\u9009\u62e9\n//  \u5c5e\u6027\uff1a\u6240\u6709\u9009\u62e9\u7684\u4ef7\u503c\u6700\u5927\u503c\nint f[V];\n\n// v[i] \u8bb0\u5f55\u6bcf\u4e2a\u7269\u54c1\u7684\u4f53\u79ef\uff0cw[i] \u8bb0\u5f55\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef7\u503c\nint v[N],w[N];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    //  \u8f93\u5165    \n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    }\n\n    //  \u5f00\u59cb\u6c42\u89e3\n    //  f[0~m]\u90fd\u662f0\uff0c\u56e0\u4e3a\u7b2c0\u4e2a\u7269\u54c1\u6ca1\u6709\u4ef7\u503c\u53ef\u8a00\n    //  \u4ece\u7b2c1\u4e2a\u7269\u54c1\u5f00\u59cb\u8ba1\u7b97\n    for(int i = 1; i &lt;= n; i++){\n        //  \u904d\u5386\u6bcf\u4e2a\u5bb9\u79ef\n        for(int j = m; j &gt;= v[i]; j--){\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n        }\n    }\n\n    //  \u8f93\u51fa\u7ed3\u679c\uff0c\u5df2\u7ecf\u904d\u5386\u4e86n\u6b21\uff0cf[m]\u8868\u793a\u524dn\u4e2a\u7269\u54c1\u5bb9\u79ef\u4e3am\u7684\u4ef7\u503c\u6700\u5927\u503c\uff0c\u5373\u6211\u4eec\u95ee\u9898\u7684\u89e3\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(V)\\approx O(n)$</p>"},{"location":"algorithm/algorithm_basic/#_8","title":"\u5b8c\u5168\u80cc\u5305\u95ee\u9898","text":"<p>\u6a21\u677f\u9898\uff1ahttps://www.acwing.com/problem/content/3/</p> <p>\u7279\u6027\uff1a\u6bcf\u79cd\u7269\u54c1\u90fd\u6709\u65e0\u9650\u4ef6\u53ef\u7528\u3002</p> <p>\u72b6\u6001\u8ba1\u7b97\uff1a</p> <p>\u4ee5\u7269\u54c1\u7684\u4e2a\u6570\u4f5c\u4e3a\u5206\u7c7b\u8ba8\u8bba\u6761\u4ef6\uff1a</p> <ol> <li>\u7b2ci\u4e2a\u7269\u54c1\u53d60\u4e2a\uff1a<code>f[i - 1][j] = f[i][j - 0*v[i]]+0*w[i]</code></li> <li>\u7b2ci\u4e2a\u7269\u54c1\u53d61\u4e2a\uff1a<code>f[i][j - 1*v[i]]+1*w[i]</code></li> <li>....</li> <li>\u7b2ci\u4e2a\u7269\u54c1\u53d6k\u4e2a\uff1a<code>f[i][j - k*v[i]]+k*w[i]</code></li> <li>....</li> </ol> <p>\u4fdd\u8bc1<code>k * v[i] &lt;= j</code>\u7684\u524d\u63d0\uff0c\u628a\u4ee5\u4e0a\u72b6\u6001\u5168\u90e8\u53d6\u4e2amax\u5f97\u5230\u7ed3\u679c</p>"},{"location":"algorithm/algorithm_basic/#_9","title":"\u6700\u521d\u7248","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, V = 1010;\nint f[N][V];\nint v[N], w[N];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 0; j &lt;= m; j++){\n            for(int k = 0; k * v[i] &lt;= j; k++){\n                f[i][j] = max(f[i][j], f[i - 1][j - k * v[i]] + k * w[i]);\n            }\n        }\n    }\n\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(NV*\\frac{V}{v})\\approx O(n^3)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p> <p>\u8be5\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u4e8e\u9ad8\uff0c\u57fa\u672c\u4e0d\u4f7f\u7528</p>"},{"location":"algorithm/algorithm_basic/#_10","title":"\u666e\u901a\u4f18\u5316\u7248","text":"<pre><code>f[i][j] \n= max(f[i - 1][j], f[i - 1][j - v[i]] + w[i], f[i - 1][j - 2 * v[i]] + 2 * w[i],f[i - 1][j - 3 * v[i]] + 2 * w[i]\uff0c ..., f[i - 1][j - k * v[i]] + k * w[i]     ,...)\n\nf[i][j - v[i]] \n= max(             f[i - 1][j - v[i]]       , f[i - 1][j - 2 *v[i]] + w[i],      f[i - 1][j - 3 * v[i]] + 2 * w[i], ..., f[i - 1][j - (k + 1) * v[i]] + k * w[i],...)\n\n\u53ef\u4ee5\u53d1\u73b0\n`f[i][j] \n= max(f[i - 1][j], f[i][j - v[i]] + w[i])`\n</code></pre> <p>\u6211\u4eec\u5f97\u5230\u65b0\u7684\u72b6\u6001\u8ba1\u7b97\u65b9\u7a0b\uff1a</p> <p><code>f[i][j] = max(f[i - 1][j], f[i][j - v[i]] + w[i])</code></p> <p>\u6ce8\u610f\uff1a</p> <p>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u65b9\u7a0b\u4e0e01\u80cc\u5305\u95ee\u9898\u4e0d\u540c</p> <ul> <li>01\u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u8ba1\u7b97\u65b9\u7a0b\u4e3a<code>f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i])</code>\uff0c\u8fd9\u91cc\u662f i - 1</li> <li>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u8ba1\u7b97\u65b9\u7a0b\u4e3a<code>f[i][j] = max(f[i - 1][j], f[i][j - v[i]] + w[i])</code>\uff0c \u8fd9\u91cc\u662f i</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, V = 1010;\nint f[N][V];\nint v[N], w[N];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 0; j &lt;= m; j++){\n            f[i][j] = f[i - 1][j];\n            if(j &gt;= v[i])\n                f[i][j] = max(f[i][j], f[i][j - v[i]] + w[i]);\n        }\n    }\n\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p> <p>\u4e0e01\u80cc\u5305\u95ee\u9898\u7c7b\u4f3c\uff0c\u8be5\u65b9\u6cd5\u8fd8\u80fd\u4f18\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u7248</p>"},{"location":"algorithm/algorithm_basic/#_11","title":"\u6700\u7ec8\u4f18\u5316\u7248","text":"<p>\u4f18\u5316\u601d\u8def\u4e0e01\u80cc\u5305\u95ee\u9898\u5927\u81f4\u76f8\u540c</p> <p>\u552f\u4e00\u4e0d\u540c\u70b9\u5728\u4e8e\uff1a</p> <p>\u672c\u6b21\u662f\u4ece\u5de6\u5f80\u53f3\u904d\u5386\u5bb9\u79efj\uff0801\u80cc\u5305\u662f\u4ece\u53f3\u5f80\u5de6\uff09\uff0c\u8fd9\u662f\u56e0\u4e3a\u72b6\u6001\u8ba1\u7b97\u65b9\u7a0b\u4e0d\u540c\uff1a</p> <ul> <li>01\u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u8ba1\u7b97\u65b9\u7a0b\u4e3a<code>f[i][j] = max(f[i - 1][j], f[i - 1][j - v[i]] + w[i])</code>\uff0c\u8fd9\u91cc\u662f i - 1</li> <li>\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u7684\u72b6\u6001\u8ba1\u7b97\u65b9\u7a0b\u4e3a<code>f[i][j] = max(f[i - 1][j], f[i][j - v[i]] + w[i])</code>\uff0c \u8fd9\u91cc\u662f i</li> </ul> <p><code>f[i][j - v[i]]</code>\u4e0e<code>f[i][j]</code>\u5728\u540c\u4e00\u884c\uff0c\u4f18\u5316\u4e3a\u4e00\u7ef4\u6570\u7ec4\u540e\uff0c\u4e3a<code>f[j - v[i]]</code>\uff0c\u5728<code>f[j]</code>\u7684\u5de6\u8fb9\uff0c\u8ba1\u7b97\u987a\u5e8f\uff1a<code>f[j - v[i]]</code>\u5148\u4e8e<code>f[j]</code></p> <p>\u6240\u4ee5\u4ece\u5de6\u5f80\u53f3\u904d\u5386</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, V = 1010;\nint f[V];\nint v[N], w[N];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; v[i] &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i++){\n        // \u4ece\u5de6\u5f80\u53f3\u904d\u5386\n        for(int j = v[i]; j &lt;= m; j++){\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n        }\n    }\n\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#_12","title":"\u591a\u91cd\u80cc\u5305\u95ee\u9898","text":"<p>\u6a21\u677f\u9898\uff1a</p> <ul> <li>\u4e0d\u9650\u65f6\u7248\uff1ahttps://www.acwing.com/problem/content/4/</li> <li>\u9650\u65f6\u7248\uff1ahttps://www.acwing.com/problem/content/5/</li> </ul> <p>\u7279\u6027\uff1a\u6bcf\u4e2a\u7269\u54c1\u6700\u591a\u9009\u62e9s[i]\u4ef6</p>"},{"location":"algorithm/algorithm_basic/#_13","title":"\u6734\u7d20\u7248","text":"<p>\u6700\u57fa\u7840\u7684\u60f3\u6cd5\uff1a\u679a\u4e3e\u7269\u54c1\u9009\u62e9\u7684\u4ef6\u6570k</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, V = 1010;\nint f[N][V];\nint v[N], w[N], s[N];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];\n    }\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 0; j &lt;= m; j++){\n            for(int k = 0; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; k++){\n                f[i][j] = max(f[i][j], f[i - 1][j - k * v[i]] + k * w[i]);\n            }\n        }\n    }\n\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(NVs)\\approx O(n^3)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(NV)\\approx O(n^2)$</p>"},{"location":"algorithm/algorithm_basic/#_14","title":"\u4f18\u5316\u7248","text":"<p>\u4e0e\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u4e0d\u540c\uff0c\u591a\u91cd\u80cc\u5305\u591a\u4e86\u4e00\u9879\uff0c\u56e0\u6b64\u4e0d\u80fd\u91c7\u7528\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u7684\u505a\u6cd5</p> <pre><code>f[i][j] \n= max(f[i - 1][j], f[i - 1][j - v[i]] + w[i], f[i - 1][j - 2 * v[i]] + 2 * w[i],f[i - 1][j - 3 * v[i]] + 2 * w[i]\uff0c ..., f[i - 1][j - k * v[i]] + k * w[i]     ,..., f[i - 1][j - s[i] * v[i]] + s[i] * w[i])\n\nf[i][j - v[i]] \n= max(             f[i - 1][j - v[i]]       , f[i - 1][j - 2 * v[i]] + w[i],     f[i - 1][j - 3 * v[i]] + 2 * w[i], ..., f[i - 1][j - (k + 1) * v[i]] + k * w[i],..., f[i - 1][j - s[i] * v[i]] + (s[i] - 1) * w[i], f[i - 1][j - (s[i] + 1) * v[i]] + s[i] * w[i])\n\n\u4e0e01\u80cc\u5305\u4e0d\u540c\uff0c\u4e0d\u80fd\u518d\u5199\u6210\uff1a\nf[i][j] \n= max(f[i - 1][j], f[i][j - v[i]] + w[i])\n\n\u56e0\u4e3af[i][j - v[i]]\u6bd4f[i][j]\u591a\u4e86\u4e00\u9879f[i - 1][j - (s[i] + 1) * v[i]] + s[i] * w[i]\uff0c\u591a\u51fa\u6765\u7684\u4e00\u9879\u8bb0\u4f5cd\n\u6240\u4ee5f[i][j - v[i]] = max(B, d)\uff0c B\u4e3ad\u524d\u9762\u82e5\u5e72\u9879\n\nf[i][j] = max(f[i - 1][j], f[i][j - v[i]] + w[i])\nf[i][j - v[i]] = max(B , d)\n-&gt; f[i][j] = max(f[i - 1][j], max(B , d) + w[i])\n\u65e0\u6cd5\u8ba1\u7b97B\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u53ef\u53d6\n</code></pre> <p>\u56de\u987e\u591a\u91cd\u80cc\u5305\u6734\u7d20\u7248\u89e3\u6cd5\u5b58\u5728\u7684\u95ee\u9898\uff1a\u9700\u8981\u679a\u4e3e\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef6\u6570\uff0c\u800c\u4e14\u8fd9\u4e00\u6b65\u4e0d\u80fd\u50cf\u5b8c\u5168\u80cc\u5305\u95ee\u9898\u90a3\u6837\u4f18\u5316\uff0c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u8fc7\u9ad8</p> <p>\u800c01\u80cc\u5305\u4e0d\u9700\u8981\u679a\u4e3e\u6bcf\u4e2a\u7269\u54c1\u7684\u4ef6\u6570\uff0c\u56e0\u4e3a\u7269\u54c1\u6700\u591a\u53ea\u67091\u4ef6</p> <p>\u6211\u4eec\u80fd\u5426\u5c06\u591a\u91cd\u80cc\u5305\u95ee\u9898\u8f6c\u6362\u4e3a01\u80cc\u5305\u95ee\u9898\uff1f</p> <p>\u4f18\u5316\u7248\u91c7\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4\u8868\u793a\u6cd5\uff0c\u5c06\u7269\u54c1\u7684\u4ef6\u6570k\u5206\u89e3\u4e3a\u82e5\u5e72\u4e2a\u4e8c\u8fdb\u5236\u7ec4\uff0c\u90a3\u4e48\u679a\u4e3ek\u53d8\u6210\u4e86\u679a\u4e3e\u6bcf\u4e2a\u7ec4\u662f\u5426\u9700\u8981</p> <p>\u56e0\u6b64\u591a\u91cd\u80cc\u5305\u95ee\u9898\u8f6c\u6362\u4e3a\u4e8601\u80cc\u5305\u95ee\u9898\u7684\u89e3\u6cd5</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u5982\u4f55\u5c06k\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u7ec4</p> <p>\u4f18\u5316\u89e3\u6cd5</p> <p>\u7406\u8bba\u524d\u63d0\uff1a</p> <ul> <li>\u4efb\u4f55\u6570\u90fd\u80fd\u7531\u4e8c\u8fdb\u52361\uff0c2\uff0c4\uff0c8\uff0c...\uff0c\u8868\u793a\uff0c\u4f8b\u5982$11=(1011)_2=8+0+2+1$</li> </ul> <p>\u6839\u636e\u8be5\u524d\u63d0\uff0c\u6211\u4eec\u5f97\u51fa\u7269\u54c1\u7684\u4ef6\u6570s\u4e5f\u80fd\u7531\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u679a\u4e3e\u7269\u54c1\u4ef6\u6570\u53d8\u6210\u4e86\u679a\u4e3e\u4e8c\u8fdb\u5236\u7ec4\u7684\u4e2a\u6570</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u7531$O(n^3)$\u7f29\u51cf\u4e3a$O(n^2log(s))$\uff0cs\u4e3a\u7269\u54c1\u7684\u4ef6\u6570\uff0c$log(s)$\u4e3a\u4e8c\u8fdb\u5236\u7ec4\u7684\u4e2a\u6570</p> <p><code>f[i][j]</code>\u72b6\u6001\u6570$i$\u7531$n$\u4e2a\u53d8\u6210$n*log_2(s)$</p> <p>log2\u53ef\u8fd9\u4e48\u6c42</p> <pre><code>#include &lt;cmath&gt;\nusing namespace std;\n\nint main(){\n    int n;\n        cin &gt;&gt; n;\n    cout &lt;&lt; log2(n) &lt;&lt; endl;\n}\n</code></pre> <p>\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u6c42\u5f97log2\u7ed3\u679c\u4e0e\u7269\u54c1\u6570\u4e0a\u9650N\u76f8\u4e58\u5f97\u5230\u65b0\u7684N\uff0c\u8fd9\u4e2aN\u8868\u793a\u603b\u72b6\u6001\u6570\u4e0a\u9650</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 11010, V = 2010;\nint v[N], w[N];\nint f[V];\n\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    // cnt\u4e3a\u5206\u7ec4\u5e8f\u6570\n    // cnt\u4e00\u5b9a\u8981\u653e\u5728\u5faa\u73af\u5916\u9762\uff0c\u56e0\u4e3acnt\u662f\u6240\u6709\u5206\u7ec4\u7684\u5e8f\u53f7\n    int cnt = 0;\n    // \u5bf9\u6bcf\u4e2a\u7269\u54c1\u8fdb\u884c\u4e8c\u8fdb\u5236\u7ec4\u5206\u7ec4\n    for(int i = 1; i &lt;= n; i++){\n        int a, b, s;\n        // a\u4e3av[i], b\u4e3aw[i], s\u4e3as[i]\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;\n        // k\u4e3a\u5206\u7ec4\u5185\u6570\u91cf\n        int k = 1;\n        // \u5bf9s\u8fdb\u884c\u5206\u4e8c\u8fdb\u5236\u7ec4\n        while(k &lt;= s){\n            // \u7b2ccnt\u4e2a\u7ec4\u542b\u6709k\u4e2a\u4ef6\u6570\n            cnt++;\n            // \u8ba1\u7b97\u7b2ccnt\u4e2a\u7ec4\u7684\u4f53\u79ef\uff0c\u6bcf\u4ef6\u7269\u54c1\u4f53\u79ef\u76f8\u540c\uff0c\u90fd\u4e3aa\n            v[cnt] = a * k;\n            // \u8ba1\u7b97\u7b2ccnt\u4e2a\u7ec4\u7684\u4ef7\u503c\uff0c\u6bcf\u4ef6\u7269\u54c1\u4ef7\u503c\u76f8\u540c\uff0c\u90fd\u4e3ab\n            w[cnt] = b * k;\n            s -= k;\n            k *= 2;\n        }\n        // \u5269\u4f59\u7684s\u4e0d\u80fd\u7ee7\u7eed\u5206\u4e3a\u4e8c\u8fdb\u5236\u7ec4\n        if(s &gt; 0){\n            cnt++;\n            v[cnt] = a * s;\n            w[cnt] = b * s;\n        }\n    }\n\n    // \u72b6\u6001\u6570\u7531 n \u53d8\u6210\u4e86 n * log2(n)\n    n = cnt;\n    // 01\u80cc\u5305\u95ee\u9898\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = m; j &gt;= v[i]; j--){\n            f[j] = max(f[j], f[j - v[i]] + w[i]);\n        }\n    }\n\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#_15","title":"\u5206\u7ec4\u80cc\u5305\u95ee\u9898","text":"<p>\u6a21\u677f\u9898\uff1ahttps://www.acwing.com/problem/content/9/</p> <p>\u7279\u6027\uff1a\u6bcf\u7ec4\u7269\u54c1\u6709\u82e5\u5e72\u4e2a\uff0c\u540c\u4e00\u7ec4\u5185\u7684\u7269\u54c1\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u3002</p> <p>\u7531\u9009\u62e9\u67d0\u4e2a\u7269\u54c1\u53d8\u6210\u4e86\u4e24\u6b65\uff1a</p> <ol> <li>\u9996\u5148\u9009\u62e9\u5206\u7ec4</li> <li>\u9009\u62e9\u4e86\u5206\u7ec4\u4e4b\u540e\u8981\u5728\u7ec4\u5185\u9009\u62e9\u4e00\u4e2a\u7269\u54c1</li> </ol> <p>\u5373\u8fdb\u884c\u4e24\u6b2101\u80cc\u5305\u95ee\u9898\uff0c\u7b2c\u4e00\u6b2101\u80cc\u5305\u95ee\u9898\u5c06\u7269\u54c1\u5f53\u6210\u7ec4\uff0c\u7b2c\u4e8c\u6b21\u5728\u7ec4\u5185\u8fdb\u884c01\u80cc\u5305\u95ee\u9898</p>"},{"location":"algorithm/algorithm_basic/#_16","title":"\u6734\u7d20\u7248","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 110, V = 110, S = 110;\nint v[N][S], w[N][S], s[N];\nint f[N][V];\n\n// i\u8868\u793a\u7b2ci\u7ec4\uff0ck\u8868\u793a\u7b2ci\u7ec4\u5185\u7684\u7b2ck\u4ef6\u7269\u54c1\uff0cj\u8868\u793a\u80cc\u5305\u5bb9\u79ef\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; s[i];\n        for(int k = 1; k &lt;= s[i]; k++)\n            cin &gt;&gt; v[i][k] &gt;&gt; w[i][k];\n    }\n\n    for(int i = 1; i &lt;= n; i ++){\n        for(int j = 0; j &lt;= m; j++){\n            f[i][j] = f[i - 1][j];\n            // \u679a\u4e3e\u80cc\u5305\u5185\u7684\u6bcf\u4e2a\u7269\u54c1\n            for(int k = 1; k &lt;= s[i]; k++){\n                // \u6ce8\u610f\u8fd9\u91cc\u7684v[i][k]\u548cw[i][k]\uff0c\u800c\u4e0d\u662fv[i][j]\u548cw[i][j]\n                if(v[i][k] &lt;= j)\n                    f[i][j] = max(f[i][j], f[i - 1][j - v[i][k]] + w[i][k]);\n            }\n        }\n    }\n\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#_17","title":"\u4f18\u5316\u7248","text":"<p>\u4e0e01\u80cc\u5305\u95ee\u9898\u4f18\u5316\u601d\u8def\u5b8c\u5168\u4e00\u81f4</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 110, V = 110, S = 110;\nint v[N][S], w[N][S], s[N];\nint f[V];\n\n// i\u8868\u793a\u7b2ci\u7ec4\uff0ck\u8868\u793a\u7b2ci\u7ec4\u5185\u7684\u7b2ck\u4ef6\u7269\u54c1\uff0cj\u8868\u793a\u80cc\u5305\u5bb9\u79ef\nint main(){\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; s[i];\n        for(int k = 1; k &lt;= s[i]; k++)\n            cin &gt;&gt; v[i][k] &gt;&gt; w[i][k];\n    }\n\n    for(int i = 1; i &lt;= n; i ++){\n        // \u679a\u4e3e\u80cc\u5305\u5185\u7684\u6bcf\u4e2a\u7269\u54c1\n        for(int j = m; j &gt;= 0; j--){\n            for(int k = 1; k &lt;= s[i]; k++){\n                if(v[i][k] &lt;= j)\n                    // \u6ce8\u610f\u8fd9\u91cc\u7684v[i][k]\u548cw[i][k]\uff0c\u800c\u4e0d\u662fv[i][j]\u548cw[i][j]\n                    f[j] = max(f[j], f[j - v[i][k]] + w[i][k]);\n            }\n        }\n\n    }\n\n    cout &lt;&lt; f[m] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#dp","title":"\u7ebf\u6027DP","text":"<p>\u7ebf\u6027DP\u5373\u9012\u63a8\u65b9\u7a0b\u5177\u6709\u660e\u663e\u7684\u7ebf\u6027\u5173\u7cfb\uff0c\u6709\u4e00\u7ef4\u7ebf\u6027\u548c\u4e8c\u7ef4\u7ebf\u6027</p> <p>\u80cc\u5305\u95ee\u9898\u4e5f\u5c5e\u4e8e\u7ebf\u6027DP</p>"},{"location":"algorithm/algorithm_basic/#_18","title":"\u6570\u5b57\u4e09\u89d2\u5f62","text":"<p>https://www.acwing.com/problem/content/900/</p> <p><code>f[i][j]</code>\u8868\u793a\u8d70\u5230\u7b2ci\u884c\u7b2cj\u5217\u7684\u5143\u7d20\u7684\u8def\u5f84\u4e4b\u548c</p>"},{"location":"algorithm/algorithm_basic/#_19","title":"\u6734\u7d20\u7248","text":"<p>\u4ece\u4e0a\u5f80\u4e0b\u904d\u5386</p> <p>\u72b6\u6001\u65b9\u7a0b<code>f[i][j] += max(f[i - 1][j - 1], f[i - 1][j])</code></p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\n// \u4e09\u89d2\u5f62\u7684\u6574\u6570\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u8981\u53d6max\uff0c\u56e0\u6b64\u8fb9\u754c\u503c\u4e3a\u8d1f\u65e0\u7a77\uff08-INF\uff09\nconst int N = 510, INF = 0x3f3f3f3f;\n// \u72b6\u6001\u8868\u8fbe\u5f0f\uff0c\u5230\u8fbe\u7b2ci\u884c\u7b2cj\u5217\u7684\u5143\u7d20\u65f6\u6240\u6709\u8def\u5f84\u7684\u96c6\u5408\uff0c\u5bf9\u5e94\u7684\u503c\u4e3a\u8def\u5f84\u6570\u5b57\u4e4b\u548c\u6700\u5927\u503c\nint f[N][N];\nint n;\n\nint main(){\n    cin &gt;&gt; n;\n    // \u5904\u7406\u8fb9\u754c\u6761\u4ef6\n    for(int i = 0; i &lt;= n; i++)\n        //\u6ce8\u610f\u662f i + 1\n        for(int j = 0; j &lt;= i + 1; j++)\n            f[i][j] = -INF;\n    // \u8f93\u5165\u4e09\u89d2\u5f62\n    for(int i = 1; i &lt;= n; i++)\n        for(int j = 1; j &lt;= i; j++)\n            cin &gt;&gt; f[i][j];\n    // \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u8ba1\u7b97\u72b6\u6001\u65b9\u7a0b\n    for(int i = 2; i &lt;= n; i++){\n        for(int j = 1; j &lt;= i; j++){\n            f[i][j] += max(f[i - 1][j - 1], f[i - 1][j]);\n        }\n    }\n\n    // \u8fd9\u91ccres\u4e00\u5b9a\u8981\u8bbe\u7f6e\u4e3a\u8d1f\u65e0\u7a77\uff0c\u56e0\u4e3a\u6570\u5b57\u4e4b\u548c\u53ef\u80fd\u4e3a\u8d1f\u6570\n    int res = -INF;\n    // \u904d\u5386\u4e09\u89d2\u5f62\u5e95\u5c42\u53d6\u5f97\u6700\u5927\u503c\n    for(int j = 1; j &lt;= n; j++)\n        res = max(res, f[n][j]);\n\n    cout &lt;&lt; res &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$</p> <p>\u7f3a\u70b9\u662f\u9700\u8981\u5904\u7406\u8fb9\u754c\u6761\u4ef6</p>"},{"location":"algorithm/algorithm_basic/#_20","title":"\u4f18\u5316\u7248","text":"<p>\u4ece\u4e0b\u5f80\u4e0a\u904d\u5386</p> <p>\u4f18\u5316\u70b9\uff1a\u7531\u4e8e\u6700\u7ec8\u6c47\u805a\u4e8e\u4e00\u70b9\uff0c\u56e0\u6b64\u5c11\u4e86\u4e00\u6b21for\u5faa\u73af\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u5904\u7406\u8fb9\u754c\u6761\u4ef6</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 510;\nint f[N][N];\nint n;\n\nint main(){\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++)\n        // \u8fd9\u91cc\u6ce8\u610f\u662fj &lt;= i \u800c\u4e0d\u662fj &lt;= n\n        for(int j = 1; j &lt;= i; j++)\n            cin &gt;&gt; f[i][j];\n    for(int i = n; i &gt;= 1; i--){\n        for(int j = n; j &gt;= 1; j--){\n            f[i][j] += max(f[i + 1][j], f[i + 1][j + 1]);\n        }\n    }\n\n    cout &lt;&lt; f[1][1] &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$</p>"},{"location":"algorithm/algorithm_basic/#_21","title":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217","text":""},{"location":"algorithm/algorithm_basic/#_22","title":"\u6734\u7d20\u7248","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010;\n\n// \u72b6\u6001\u8868\u8fbe\u5f0f\uff0cf[i]\u8868\u793a\u7b2ci\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684\u6240\u6709\u5355\u8c03\u9012\u589e\u5b50\u5e8f\u5217\u7684\u96c6\u5408\n// f[i]\u7684\u503c\u8868\u793a\u8fd9\u4e9b\u96c6\u5408\u7684\u5e8f\u5217\u6700\u957f\u5ea6\nint f[N];\n// \u5b58\u50a8\u5e8f\u5217\nint a[N];\nint n;\n\nint main(){\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    // res\u7528\u4e8e\u83b7\u53d6\u6bcf\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684\u6700\u5927\u5355\u8c03\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\n    int res = 1;\n    for(int i = 1; i &lt;= n; i++){\n        f[i] = 1;\n        // \u904d\u5386\u524dj\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u7ed3\u5c3e\u7684\u6700\u5927\u5355\u8c03\u9012\u589e\u5b50\u5e8f\u5217\u957f\u5ea6\u4e3af[j]\n        for(int j = 1; j &lt; i; j++){\n            // \u5982\u679c\u7b2ci\u4e2a\u5143\u7d20\u6bd4\u7b2cj\u4e2a\u5143\u7d20\u5927\uff0c\u8bf4\u660e\u7b2ci\u4e2a\u5143\u7d20\u53ef\u4ee5\u52a0\u5165\u8be5\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u5219\u957f\u5ea6\u52a01\n            if(a[i] &gt; a[j]) f[i] = max(f[i], f[j] + 1);\n        }\n        res = max(res, f[i]);\n    }\n\n    cout &lt;&lt; res &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p>"},{"location":"algorithm/algorithm_basic/#_23","title":"\u4f18\u5316\u7248","text":"<p>\u52a8\u6001\u89c4\u5212 + \u4e8c\u5206\u67e5\u627e</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010;\n// tails[i]\u8bb0\u5f55\u5e8f\u5217\u5c3e\u90e8\u5143\u7d20, len\u8868\u793a\u5f53\u524d\u5e8f\u5217\u7684\u957f\u5ea6\nint tails[N], len;\nint a[N];\nint n;\n\nint main(){\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    // \u521d\u59cb\u5316tails\n    tails[++len] = a[1];\n    // \u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\n    for(int i = 2; i &lt;= n; i++){\n        // \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u5e8f\u5217\u5c3e\u90e8\u5143\u7d20\u5927\uff0c\u8bf4\u660e\u8be5\u5143\u7d20\u53ef\u76f4\u63a5\u7eb3\u5165\u8be5\u5e8f\u5217\uff0c\u5e8f\u5217\u957f\u5ea6\u52a0\u4e00\n        if(a[i] &gt; tails[len]) \n            tails[++len] = a[i];\n        // \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u5e8f\u5217\u5c3e\u90e8\u5143\u7d20\u5c0f\uff0c\u6839\u636e\u5143\u7d20\u4e4b\u95f4\u5dee\u8ddd\u8d8a\u5c0f\u5e8f\u5217\u957f\u5ea6\u8d8a\u53ef\u80fd\u957f\u7684\u539f\u7406\n        // \u627e\u5230\u5e8f\u5217\u4e2d\u6bd4\u5f53\u524d\u5143\u7d20\u5927\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5c06\u5176\u53d6\u4ee3\u4e3a\u5f53\u524d\u5143\u7d20a[i]\n        // \u5e8f\u5217\u957f\u5ea6\u4e0d\u53d8\n        else{\n            int l = 1, r = len;\n            while(l &lt; r){\n                int mid = (l + r) &gt;&gt; 1;\n                if(tails[mid] &gt;= a[i]) \n                    r = mid;\n                else \n                    l = mid + 1;\n            }\n            tails[l] = a[i];\n        }\n    }\n    // \u6700\u540e\u8f93\u51falen\uff0clen\u4e3a\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6\n    cout &lt;&lt; len &lt;&lt; endl;\n}\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(nlog(n))$</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p>"},{"location":"algorithm/algorithm_basic/#_24","title":"\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":""},{"location":"algorithm/algorithm_basic/#_25","title":"\u6734\u7d20\u7248","text":"<p>\u9898\u89e3\u8be6\u89c1\uff1ahttps://www.acwing.com/solution/content/8111/</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nconst int N = 1010, M = 1010;\nint f[N][M];\nint n, m;\nchar a[N], b[M];\n\nint main(){\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; a + 1 &gt;&gt; b + 1;\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 1; j &lt;= m; j++){\n            f[i][j] = max(f[i - 1][j], f[i][j - 1]);\n            if(a[i] == b[j]) f[i][j] = max(f[i][j], f[i - 1][j - 1] + 1);\n        }\n    }\n\n    cout &lt;&lt; f[n][m] &lt;&lt; endl;\n}\n</code></pre>"},{"location":"algorithm/algorithm_basic/#dp_1","title":"\u533a\u95f4DP","text":"<p>https://www.acwing.com/problem/content/284/</p>"},{"location":"algorithm/algorithm_basic/#_26","title":"\u5c0f\u6280\u5de7","text":""},{"location":"algorithm/algorithm_basic/#memset","title":"memset","text":"<p>\u8be6\u89c1https://blog.csdn.net/Supreme7/article/details/115431235</p> <pre><code>#include &lt;cstring&gt;\nvoid *memset(void *str, int c, size_t n)\n</code></pre> <p>\u7ed9\u524dn\u4e2a\u5b57\u8282\u8d4b\u503cc   </p> <p>\u5e38\u7528</p> <ul> <li>\u521d\u59cb\u5316\u4e3a0:\uff1amemset(a,-1,sizeof(a))</li> <li>\u521d\u59cb\u5316\u4e3a-1\uff1amemset(a,0,sizeof(a))</li> <li>\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927\uff1amemset(a,0x3f,sizeof(a))</li> </ul>"},{"location":"algorithm/algorithm_basic/#_27","title":"\u65e0\u7a77\u5927","text":"<p>\u8be6\u89c1 https://blog.csdn.net/qq_40816078/article/details/82459599#:~:text=\u51c6\u786e\u7684\u8bf4\uff1a%20inf</p> <p>\u4e00\u822c\u8bbe\u7f6e\u65e0\u7a77\u5927\u4e3aINF=0x3f3f3f3f</p> <p>\u521d\u59cb\u5316\u4e3a\u65e0\u7a77\u5927\uff1amemset(a,0x3f,sizeof(a))</p>"},{"location":"algorithm/algorithm_basic/#stl","title":"STL\u5bb9\u5668","text":""},{"location":"algorithm/algorithm_basic/#_28","title":"\u4f18\u5148\u7ea7\u961f\u5217","text":"<p>https://blog.csdn.net/weixin_36888577/article/details/79937886</p>"},{"location":"algorithm/leetcode/","title":"leetcode","text":""},{"location":"algorithm/leetcode/#_1","title":"\u9898\u5355","text":""},{"location":"algorithm/leetcode/#list","title":"\u534e\u4e3a\u63a8\u8350\u9898\u578bList","text":"<p>\u26a0\ufe0f\u673a\u8003\u9898\u578b\u53c2\u8003(\u5982\u6709\u7ade\u8d5b\u7ecf\u5386\u627e\u7fa4\u4e3b\u786e\u8ba4\u662f\u5426\u53ef\u4ee5\u514d\u8003)\uff1a \u9012\u5f52\uff1aleetcode70\u3001112\u3001509 \u5206\u6cbb\uff1aleetcode23\u3001169\u3001240 \u5355\u8c03\u6808\uff1aleetcode84\u300185\u3001739\u3001503 \u5e76\u67e5\u96c6\uff1aleetcode547\u3001200\u3001684 \u6ed1\u52a8\u7a97\u53e3\uff1aleetcode209\u30013\u30011004\u30011208 \u524d\u7f00\u548c\uff1aleetcode724\u3001560\u3001437\u30011248 \u5dee\u5206\uff1aleetcode1094\u3001121\u3001122 \u62d3\u6251\u6392\u5e8f\uff1aleetcode210 \u5b57\u7b26\u4e32\uff1aleetcode5\u300120\u300143\u300193 \u4e8c\u5206\u67e5\u627e\uff1aleetcode33\u300134 BFS\uff1aleetcode127\u3001139\u3001130\u3001529\u3001815 DFS&amp;\u56de\u6eaf\uff1aleetcode934\u3001685\u30011102\u3001531\u3001533\u3001113\u3001332\u3001337 \u52a8\u6001\u89c4\u5212\uff1aleetcode213\u3001123\u300162\u300163\u3001361\u30011230 \u8d2a\u5fc3\uff1aleetcode55\u3001435\u3001621\u3001452 \u5b57\u5178\u6811\uff1aleetcode820\u3001208\u3001648</p>"},{"location":"algorithm/leetcode/#21","title":"21 \u5408\u5e76\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868","text":""},{"location":"algorithm/leetcode/#_2","title":"\u89e3\u6cd5\u4e00\uff1a\u9012\u5f52","text":"<pre><code>s1: A-&gt;B-&gt;C-&gt;...\ns2: a-&gt;b-&gt;c-&gt;...\n</code></pre> <p>\u5047\u8bbe\u6709\u94fe\u8868s1\u548cs2\uff0c\u5982\u679cA &lt; a\uff0c\u5219\u672c\u6b21\u6bd4\u8f83\u5f97\u5230\u94fe\u8868\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e3aA\uff0c\u5e76\u4e14\u4e0b\u4e00\u6b21B\u548ca\u6bd4\u8f83\uff1b\u5426\u5219\uff0c\u672c\u6b21\u6bd4\u8f83\u5f97\u5230\u94fe\u8868\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u4e3aa\uff0c\u4e0b\u4e00\u6b21A\u548cb\u6bd4\u8f83</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        if(!list1)\n            return list2;\n        if(!list2)\n            return list1;\n        if(list1-&gt;val &lt; list2-&gt;val){\n            list1-&gt;next = mergeTwoLists(list1-&gt;next, list2);\n            return list1;\n        }\n        else{\n            list2-&gt;next = mergeTwoLists(list1, list2-&gt;next);\n            return list2;\n        }\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+m)\uff0c\u5176\u4e2d n \u548c m \u5206\u522b\u4e3a\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u3002\u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528\u9012\u5f52\u90fd\u4f1a\u53bb\u6389 l1 \u6216\u8005 l2 \u7684\u5934\u8282\u70b9\uff08\u76f4\u5230\u81f3\u5c11\u6709\u4e00\u4e2a\u94fe\u8868\u4e3a\u7a7a\uff09\uff0c\u51fd\u6570 mergeTwoList \u81f3\u591a\u53ea\u4f1a\u9012\u5f52\u8c03\u7528\u6bcf\u4e2a\u8282\u70b9\u4e00\u6b21\u3002\u56e0\u6b64\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u5408\u5e76\u540e\u7684\u94fe\u8868\u957f\u5ea6\uff0c\u5373 O(n+m)\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n+m)\uff0c\u5176\u4e2d n \u548c m \u5206\u522b\u4e3a\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u3002\u9012\u5f52\u8c03\u7528 mergeTwoLists \u51fd\u6570\u65f6\u9700\u8981\u6d88\u8017\u6808\u7a7a\u95f4\uff0c\u6808\u7a7a\u95f4\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6df1\u5ea6\u3002\u7ed3\u675f\u9012\u5f52\u8c03\u7528\u65f6 mergeTwoLists \u51fd\u6570\u6700\u591a\u8c03\u7528 n+m \u6b21\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m)\u3002</p>"},{"location":"algorithm/leetcode/#_3","title":"\u89e3\u6cd5\u4e8c\uff1a\u8fed\u4ee3","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* head = new ListNode();\n        ListNode* tail = head;\n        while (list1 != nullptr &amp;&amp; list2 != nullptr) {\n            if (list1-&gt;val &lt; list2-&gt;val) {\n                tail-&gt;next = list1;\n                list1 = list1-&gt;next;\n            } else {\n                tail-&gt;next = list2;\n                list2 = list2-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = list1 == nullptr ? list2 : list1;\n        return head-&gt;next;\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n+m)\uff0c\u5176\u4e2d n \u548c m \u5206\u522b\u4e3a\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u3002\u56e0\u4e3a\u6bcf\u6b21\u5faa\u73af\u8fed\u4ee3\u4e2d\uff0cl1 \u548c l2 \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u4f1a\u88ab\u653e\u8fdb\u5408\u5e76\u94fe\u8868\u4e2d\uff0c \u56e0\u6b64 while \u5faa\u73af\u7684\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7\u4e24\u4e2a\u94fe\u8868\u7684\u957f\u5ea6\u4e4b\u548c\u3002\u6240\u6709\u5176\u4ed6\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f\u5e38\u6570\u7ea7\u522b\u7684\uff0c\u56e0\u6b64\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n+m)\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\u6211\u4eec\u53ea\u9700\u8981\u5e38\u6570\u7684\u7a7a\u95f4\u5b58\u653e\u82e5\u5e72\u53d8\u91cf\u3002</p>"},{"location":"algorithm/leetcode/#23-k","title":"23 \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868","text":"<p>https://leetcode.cn/problems/merge-k-sorted-lists/description/</p> <p>\u672c\u9898\u572821 \u5408\u5e76\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u52a0\u96be</p>"},{"location":"algorithm/leetcode/#_4","title":"\u89e3\u6cd5\u4e00\uff1a\u987a\u5e8f\u5408\u5e76","text":"<p>\u6bcf\u76f8\u90bb\u4e24\u4e2a\u5408\u5e76\u5347\u5e8f\u94fe\u8868</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2){\n        ListNode* head = new ListNode();\n        ListNode* tail = head;\n        while(list1 != nullptr &amp;&amp; list2 != nullptr){\n            if(list1-&gt;val &lt; list2-&gt;val){\n                tail-&gt;next = list1;\n                list1 = list1-&gt;next;\n            }\n            else{\n                tail-&gt;next = list2;\n                list2 = list2-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = list1 == nullptr ? list2 : list1;\n        return head-&gt;next;\n    }\npublic:\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode* ans = nullptr;\n        for(int i = 0; i &lt; lists.size(); i++){\n            ans = mergeTwoLists(ans, lists[i]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#_5","title":"\u89e3\u6cd5\u4e8c\uff1a \u5206\u6cbb\u5408\u5e76","text":"<p>\u7c7b\u4f3c\u4e8e\u5feb\u901f\u6392\u5e8f\uff0c\u5206\u7ec4\u5408\u5e76</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2){\n        ListNode* head = new ListNode();\n        ListNode* tail = head;\n        while(list1 != nullptr &amp;&amp; list2 != nullptr){\n            if(list1-&gt;val &lt; list2-&gt;val){\n                tail-&gt;next = list1;\n                list1 = list1-&gt;next;\n            }\n            else{\n                tail-&gt;next = list2;\n                list2 = list2-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = list1 == nullptr ? list2 : list1;\n        return head-&gt;next;\n    }\n    ListNode* merge(vector&lt;ListNode*&gt;&amp; lists,int l, int r){\n        if(l == r)\n            return lists[l];\n        if(l &gt; r)\n            return nullptr;\n        int mid = (l + r) &gt;&gt; 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n    }\npublic:\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        return merge(lists, 0, lists.size() - 1);\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#_6","title":"\u89e3\u6cd5\u4e09\uff1a\u4f18\u5148\u7ea7\u961f\u5217","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    struct Status{\n        int val;\n        ListNode* ptr;\n\n    };\n    struct cmp{\n        bool operator () (const Status&amp; s1, Status &amp;s2)  const {\n            return s1.val &gt; s2.val;\n        }\n    };\n\n    priority_queue&lt;Status,vector&lt;Status&gt;,cmp&gt; q;\npublic:\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode* head = new ListNode();\n        ListNode* tail = head;\n        for(auto node : lists){\n            if(node)\n                q.push({node-&gt;val, node});\n        }\n        while(!q.empty()){\n            Status s = q.top();\n            q.pop();\n            tail-&gt;next = s.ptr;\n            tail = tail-&gt;next;\n            if(s.ptr-&gt;next)\n                q.push({s.ptr-&gt;next-&gt;val, s.ptr-&gt;next});\n        }\n        return head-&gt;next;\n    }\n};\n</code></pre> <p>\u6216\u5199\u6210\uff1a</p> <p>\u533a\u522b\u53ea\u662f\u5728\u4e8e\u4f18\u5148\u7ea7\u961f\u5217\u81ea\u5b9a\u4e49\u6bd4\u8f83\u7684\u4e0d\u540c\u5199\u6cd5</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n#include &lt;queue&gt;\nclass Solution {\nprivate:\n    struct Status{\n        int val;\n        ListNode* ptr;\n        // \u4e00\u5b9a\u8981\u539f\u5c01\u4e0d\u52a8\u7684\u8fd9\u6837\u5199\n        bool operator &lt; (const Status&amp;s) const{\n            return val &gt; s.val;\n        }\n    };\n    // \u4e00\u5b9a\u8981\u539f\u5c01\u4e0d\u52a8\u7684\u8fd9\u6837\u5199\n    priority_queue&lt;Status&gt; q;\npublic:\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode* head = new ListNode();\n        ListNode* tail = head;\n        for(auto node : lists){\n            if(node)\n                q.push({node-&gt;val, node});\n        }\n        while(!q.empty()){\n            Status s = q.top();\n            q.pop();\n            tail-&gt;next = s.ptr;\n            tail = tail-&gt;next;\n            if(s.ptr-&gt;next)\n                q.push({s.ptr-&gt;next-&gt;val, s.ptr-&gt;next});\n        }\n        return head-&gt;next;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#45-ii","title":"45 \u8df3\u8dc3\u6e38\u620fII","text":"<pre><code>class Solution {\npublic:\n    int jump(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int start = 0, end = start + 1;\n        int ans = 0;\n        while(end &lt; n){\n            int nextStep;\n            for(int i = start; i &lt; end; i++){\n                nextStep = max(nextStep, i + nums[i]);\n            }\n            ans++;\n            start = end;\n            end = nextStep + 1;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u4f18\u5316\u7248</p> <pre><code>class Solution {\npublic:\n    int jump(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        // end\u4e3a\u8fb9\u754c\u4e0b\u6807\uff0c\u5f53\u524di\u80fd\u904d\u5386\u7684\u6700\u5927\u4e0b\u6807\u503c\n        int end = 0;\n        int nextStep = 0;\n        int ans = 0;\n        // \u95ee\u5230nums[n - 1]\u9700\u8981\u7684\u6700\u5c0f\u8df3\u8dc3\u6b21\u6570\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u8ba1\u7b97\u7b2cn - 1\u4e2a\n        for(int i = 0; i &lt; n; i++){\n            nextStep = max(nextStep, i + nums[i]);\n            if(i == end){\n                ans++;\n                end = nextStep;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#55","title":"55 \u8df3\u8dc3\u6e38\u620f","text":"<p>\u7ef4\u62a4\u6700\u5927\u53ef\u8fbe\u4f4d\u7f6enextStep</p> <p>\u5982\u679c\u5f53\u524d\u4f4d\u7f6ei &lt;= nextStep\uff0c\u8bf4\u660e\u5f53\u524d\u4f4d\u7f6ei\u53ef\u8fbe\uff0c\u53ef\u8df3\u5230\u5f53\u524d\u4f4d\u7f6ei\u4e0a\uff0c\u66f4\u65b0\u6700\u5927\u53ef\u8fbe\u4f4d\u7f6e</p> <p>\u5982\u679c\u6700\u5927\u53ef\u8fbe\u4f4d\u7f6e\u6bd4n - 1\u5927\uff0c\u8bf4\u660e\u80fd\u591f\u5230\u8fben - 1</p> <pre><code>class Solution {\npublic:\n    bool canJump(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int nextStep = 0;\n        for(int i = 0; i &lt; n; i++){\n            if(i &lt;= nextStep){\n                nextStep = max(nextStep, i + nums[i]);\n                if(nextStep &gt;= n - 1)\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#70","title":"70 \u722c\u697c\u68af","text":"<p>https://leetcode.cn/problems/climbing-stairs/description/</p>"},{"location":"algorithm/leetcode/#_7","title":"\u89e3\u6cd5\u4e00\uff1a\u9012\u5f52","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        if(n &lt;= 1)\n            return 1;\n        return climbStairs(n - 1) + climbStairs(n - 2);\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(2^n)$</p> <p>\u53ef\u89c6\u4e3a\u4e8c\u53c9\u6811\uff0c\u6811\u9ad8\u4e3an\uff0c\u8282\u70b9\u6570\u4e3a$2^n$\uff0c\u904d\u5386\u641c\u7d22\u6811\u9700\u8981$2^n$\u6b21</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p> <p>n\u4e2a\u6808\u7a7a\u95f4</p>"},{"location":"algorithm/leetcode/#_8","title":"\u89e3\u6cd5\u4e8c\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22","text":"<pre><code>class Solution {\nprivate:\n    vector&lt;int&gt; m;\n    int dfs(int n){\n        if(n &lt;= 1)\n            return 1;\n        int &amp;res = m[n];\n        if(res)\n            return res;\n        return dfs(n - 1) + dfs(n - 2);\n    }\npublic:\n    int climbStairs(int n) {\n        m.resize(n + 1);\n        return dfs(n);\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p> <p>\u6bcf\u4e2a\u72b6\u6001\u53ea\u4f1a\u8ba1\u7b97\u4e00\u6b21\uff0c\u5171n\u4e2a\u72b6\u6001</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p> <p>n\u4e2a\u6808\u7a7a\u95f4</p>"},{"location":"algorithm/leetcode/#_9","title":"\u89e3\u6cd5\u4e09\uff1a\u52a8\u6001\u89c4\u5212","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dp;\n    int climbStairs(int n) {\n        dp.resize(n + 1);\n        dp[0] = 1;\n        dp[1] = 1;\n        for(int i = 2; i &lt;= n; i++)\n            dp[i] = dp[i - 1] + dp[i - 2];\n        return dp[n];\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p> <p>\u72b6\u6001\u6570n * \u72b6\u6001\u8ba1\u7b971\u6b21</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p> <p>n\u4e2a\u72b6\u6001</p>"},{"location":"algorithm/leetcode/#_10","title":"\u89e3\u6cd5\u56db\uff1a\u7a7a\u95f4\u4f18\u5316","text":"<pre><code>class Solution {\npublic:\n    int climbStairs(int n) {\n        int a = 0, b = 1, c;\n        for(int i = 1; i &lt;= n; i++){\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n};\n</code></pre> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$</p> <p>\u72b6\u6001\u6570n * \u72b6\u6001\u8ba1\u7b971\u6b21</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(1)$</p> <p>\u53ea\u97003\u4e2a\u53d8\u91cf</p>"},{"location":"algorithm/leetcode/#84","title":"84 \u67f1\u72b6\u56fe\u6700\u5927\u7684\u77e9\u5f62","text":"<p>https://leetcode.cn/problems/largest-rectangle-in-histogram/description/</p>"},{"location":"algorithm/leetcode/#_11","title":"\u89e3\u6cd5\u4e00\uff1a \u66b4\u529b\u679a\u4e3e","text":"<p>\u679a\u4e3e\u5bbd\uff1a\u679a\u4e3e\u5de6\u8fb9\u754c\uff0c\u518d\u679a\u4e3e\u53f3\u8fb9\u754c</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        int ans = 0;\n        int n = heights.size();\n        for(int i = 0; i &lt; n; i++){\n            int minHeight = heights[i];\n            for(int j = i; j &lt; n; j++){\n                minHeight = min(minHeight, heights[j]);\n                ans = max(ans, (j - i + 1) * minHeight);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u679a\u4e3e\u9ad8\uff1a</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        int ans = 0;\n        int n = heights.size();\n        // \u679a\u4e3e\u6bcf\u6839\u67f1\u5b50\u7684\u9ad8\u5ea6\n        for(int mid = 0; mid &lt; n; mid++){\n            int height = heights[mid];\n            int left = mid, right = mid;\n            // \u5982\u679c\u5de6\u53f3\u67f1\u5b50\u6bd4\u5f53\u524d\u679a\u4e3e\u7684\u67f1\u5b50\u9ad8\uff0c\u90a3\u4e48\u77e9\u5f62\u7684\u9ad8\u5ea6\u4ecd\u7136\u4e3a\u5f53\u524d\u679a\u4e3e\u67f1\u5b50\u7684\u9ad8\u5ea6heights[mid]\n            while(left - 1 &gt;= 0 &amp;&amp; heights[left - 1] &gt;= height) --left;\n            while(right + 1 &lt; n &amp;&amp; heights[right + 1] &gt;= height) ++right;\n            // \u6ce8\u610f\u8fd9\u91ccleft\u548cright\u90fd\u6307\u5411\u6700\u540e\u4e00\u4e2a\u6bd4\u679a\u4e3e\u67f1\u5b50\u9ad8\u5ea6\u5927\u7684\u67f1\u5b50\n            // \u4e0e\u5355\u8c03\u6808\u505a\u6cd5\u4e0d\u540c\uff0c\u8fd9\u91cc\u4e3aright - left + 1\uff08\u5355\u8c03\u6808\u662fright - left - 1\uff09\n            ans = max(ans, (right - left + 1) * height);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u4e24\u79cd\u66b4\u529b\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a$ O(N^2)$\uff0c\u4f1a\u8d85\u51fa\u65f6\u95f4\u9650\u5236\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u8fdb\u884c\u4f18\u5316\u3002\u8003\u8651\u5230\u679a\u4e3e\u300c\u5bbd\u300d\u7684\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e24\u91cd\u5faa\u73af\uff0c\u672c\u8eab\u5c31\u5df2\u7ecf\u9700\u8981 $O(N^2)$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e0d\u5bb9\u6613\u4f18\u5316\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f18\u5316\u53ea\u4f7f\u7528\u4e86\u4e00\u91cd\u5faa\u73af\u7684\u679a\u4e3e\u300c\u9ad8\u300d\u7684\u65b9\u6cd5\u3002</p>"},{"location":"algorithm/leetcode/#_12","title":"\u89e3\u6cd5\u4e8c\uff1a \u5355\u8c03\u6808","text":""},{"location":"algorithm/leetcode/#_13","title":"\u6734\u7d20\u7248","text":"<p>\u5355\u8c03\u6808\u5e38\u7528\u4e8e\u67e5\u627e\u6bd4\u5b83\u5927\u7684\u7b2c\u4e00\u4e2a\u6570 or \u6bd4\u5b83\u5c0f\u7684\u7b2c\u4e00\u4e2a\u6570</p> <p>\u5355\u8c03\u9012\u589e\u6808\uff1a\u6808\u5185\u79bb\u6808\u9876\u8d8a\u8fd1\uff08\u4e0b\u6807\u8d8a\u5927\uff09\uff0c\u6808\u5143\u7d20\u8d8a\u5927\uff1b\u6808\u9876\u5143\u7d20\u4e3a\u6808\u5185\u6700\u5927</p> <ul> <li>\u5f53\u6709\u65b0\u5143\u7d20\u8fdb\u5165\uff0c\u5982\u679c\u65b0\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u76f4\u63a5\u5165\u6808\u3002</li> <li>\u5f53\u6709\u65b0\u5143\u7d20\u8fdb\u5165\uff0c\u5982\u679c\u65b0\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5c0f\uff0c\u6808\u5f39\u51fa\uff0c\u76f4\u5230\u6ee1\u8db3\u65b0\u5143\u7d20\u6bd4\u6808\u9876\u5143\u7d20\u5927\uff0c\u518d\u5c06\u65b0\u5143\u7d20\u5165\u6808\u3002</li> </ul> <p>\u7531\u6b64\u53ef\u89c1\uff0c\u65b0\u5143\u7d20C\u4f7f\u6808\u9876\u5143\u7d20A\u5f39\u51fa\u540e\uff0c\u4e0b\u4e00\u4e2a\u6808\u9876\u5143\u7d20B\u662fA\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4B\u5c0f\u7684\u5143\u7d20\uff0c\u65b0\u5143\u7d20C\u662fA\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4C\u5c0f\u7684\u5143\u7d20</p> <p>\u7531\u66b4\u529b\u679a\u4e3e\u9ad8\u7684\u89e3\u6cd5\u53ef\u77e5\u9053\uff0c\u6211\u4eec\u679a\u4e3e\u9ad8\u5ea6\u540e\u9700\u8981\u5206\u522b\u5f80\u4e24\u8fb9\u5bfb\u627e\u6bd4\u5b83\u77ee\u7684\u7b2c\u4e00\u4e2a\u67f1\u5b50\uff08\u6570\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u5355\u8c03\u6808</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        int ans = 0;\n        int n = heights.size();\n        vector&lt;int&gt; left(n), right(n);\n        stack&lt;int&gt; stk;\n        for(int i = 0; i &lt; n; i++){\n            while(!stk.empty() &amp;&amp; heights[stk.top()] &gt;= heights[i]) stk.pop();\n            left[i] = (stk.empty() ? -1 : stk.top());\n            stk.push(i);\n        }\n        stk = stack&lt;int&gt;();\n        for(int i = n - 1; i &gt;= 0; i--){\n            while(!stk.empty() &amp;&amp; heights[stk.top()] &gt;= heights[i]) stk.pop();\n            right[i] = (stk.empty() ? n : stk.top());\n            stk.push(i);\n        }\n        for(int i = 0; i &lt; n; i++){\n            // right \u548c left \u90fd\u6307\u5411\u7b2c\u4e00\u4e2a\u6bd4\u679a\u4e3e\u67f1\u5b50\u5c0f\u7684\u67f1\u5b50\uff0c\u56e0\u6b64\u4e0d\u5305\u542bleft \u548c right\n            // \u5bbd\u5ea6\u8ba1\u7b97\u4e3a\uff1a (right - 1) - (left + 1) + 1 = right - left - 1\n            ans = max(ans, (right[i] - left[i] - 1) * heights[i]);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N)\u3002</li> </ul> <p>\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u53ea\u4f1a\u5165\u6808\u4e00\u6b21\uff08\u5728\u679a\u4e3e\u5230\u5b83\u65f6\uff09\uff0c\u5e76\u4e14\u6700\u591a\u51fa\u6808\u4e00\u6b21\u3002</p> <p>\u56e0\u6b64\u5f53\u6211\u4eec\u4ece\u5de6\u5411\u53f3/\u603b\u53f3\u5411\u5de6\u904d\u5386\u6570\u7ec4\u65f6\uff0c\u5bf9\u6808\u7684\u64cd\u4f5c\u7684\u6b21\u6570\u5c31\u4e3a O(N)\u3002\u6240\u4ee5\u5355\u8c03\u6808\u7684\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\u3002</p>"},{"location":"algorithm/leetcode/#_14","title":"\u4f18\u5316\u7248","text":"<p>\u5bf9\u4e0a\u8ff0\u8fdb\u884c\u4f18\u5316</p> <p>\u65b0\u5143\u7d20C\u4f7f\u6808\u9876\u5143\u7d20A\u5f39\u51fa\u540e\uff0c\u4e0b\u4e00\u4e2a\u6808\u9876\u5143\u7d20B\u662fA\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6bd4B\u5c0f\u7684\u5143\u7d20\uff0c\u65b0\u5143\u7d20C\u662fA\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4C\u5c0f\u7684\u5143\u7d20</p> <pre><code>class Solution {\npublic:\n    int largestRectangleArea(vector&lt;int&gt;&amp; heights) {\n        int len = heights.size() + 2;\n        vector&lt;int&gt; height(len);\n        // \u5728heights\u6570\u7ec4\u57fa\u7840\u4e0a\u5728\u5934\u5c3e\u52a0\u4e0a0\u5143\u7d20\n        // \u8fd9\u662f\u56e0\u4e3a\u4ee5heights[0]\uff08heights[heights.size() - 1]\uff09\u4f5c\u4e3a\u67f1\u5b50\u9ad8\u5ea6\u65f6\uff0c\u7f3a\u5c11\u5de6\u8fb9\u754c\uff08\u53f3\u8fb9\u754c\uff09\n        // \u4e3a\u5176\u8865\u4e0a\u5de6\u53f3\u8fb9\u754c\uff0c\u4f7f\u5176\u80fd\u591f\u8ba1\u7b97heights[0]\uff08heights[heights.size() - 1]\uff09\u4f5c\u4e3a\u67f1\u5b50\u9ad8\u5ea6\u65f6\u7684\u9762\u79ef\n        height[0] = 0;\n        height[len - 1] = 0;\n        for(int i = 1; i &lt; len - 1; i++)\n            height[i] = heights[i - 1];\n        stack&lt;int&gt; stk;\n        int ans = 0;\n        for(int i = 0; i &lt; len; i++){\n            while(!stk.empty() &amp;&amp; height[i] &lt; height[stk.top()]){\n                // \u65b0\u5143\u7d20i\u8ba9\u6808\u5f39\u51fa\uff0c\u6808\u9876\u5143\u7d20\u4e3astk.top()\n                int idx = stk.top();\n                stk.pop();\n                // \u8fd9\u91cc\u7684stk.top()\u4e3a\u5f39\u51fa\u540e\u7684\u4e0b\u4e00\u4e2a\u6808\u9876\u5143\u7d20\n                int w = i - stk.top() - 1;\n                // \u9ad8\u5ea6\u4e3a\u6700\u521d\u7684\u6808\u9876\u5143\u7d20\n                ans = max(ans, w * height[idx]);\n            }\n            // \u6ca1\u6709\u5f39\u51fa\u65f6\u4e0d\u9700\u8981\u8ba1\u7b97\u9762\u79ef\n            stk.push(i);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(N)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N)\u3002</li> </ul>"},{"location":"algorithm/leetcode/#85","title":"85 \u6700\u5927\u77e9\u5f62","text":"<p>https://leetcode.cn/problems/maximal-rectangle/</p> <p>\u82e5<code>matrix[i][j] == \u20181\u2019</code>\uff0c\u90a3\u4e48\u4ee5\u8be5\u70b9\u4e3a\u77e9\u5f62\u7684\u53f3\u4e0b\u89d2</p> <ul> <li>\u8bb0<code>left[i][j]</code>\u4e3a\u7b2ci\u884c\u7b2cj\u5217\u5143\u7d20\u5de6\u8fb9\u8fde\u7eed1\u7684\u4e2a\u6570\uff08\u5305\u62ec\u7b2ci\u884c\u7b2cj\u5217\uff09</li> <li>\u90a3\u4e48\u77e9\u5f62\u53ef\u4ee5\u8f6c\u6362\u4e3a\u82e5\u5e72\u4e2a\u67f1\u5f62\uff0c<code>left[i][j]</code>\u4e3a\u67f1\u5f62\u7684\u9ad8\u5ea6\uff0c\u9898\u76ee\u5c31\u53d8\u6210\u4e8684 \u6c42\u67f1\u72b6\u56fe\u6700\u5927\u7684\u67f1\u5f62</li> <li>\u5bbd\u5ea6\u4e3ak - i + 1\uff0ck\u4e3a\u7b2ci\u884c\u524d\u7684\u7b2ck\u884c</li> </ul> <p>\u6362\u4e00\u4e0b\u5750\u6807\u8f74\uff0c\u5bbd\u5ea6\u5c31\u662f\u4ee3\u7801\u4e2d\u7684\u9ad8\u5ea6\uff0c\u9ad8\u5ea6\u5c31\u662f\u4ee3\u7801\u4e2d\u7684\u5bbd\u5ea6</p>"},{"location":"algorithm/leetcode/#_15","title":"\u89e3\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e\u70b9","text":"<pre><code>class Solution {\npublic:\n    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        int m = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; left(n,vector&lt;int&gt;(m, 0));\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (matrix[i][j] == '1') {\n                    left[i][j] = (j == 0 ? 0: left[i][j - 1]) + 1;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i &lt; n; i++){\n            for(int j = 0; j &lt; m; j++){\n                if(matrix[i][j] == '1'){\n                    int w = left[i][j];\n                    // \u8fd9\u91ccarea\u521d\u59cb\u5316\u4e3aw, \u56e0\u4e3a\u5047\u8bbematrix[k][j]\u90fd\u4e3a'0', \u5bbd\u5ea6\u81f3\u5c11\u4e3a1\n                    int area = w;\n                    for(int k = i - 1; k &gt;= 0; k--){\n                        w = min(w, left[k][j]);\n                        area = max(area, (i - k + 1) * w);\n                    }\n                    ans = max(ans, area);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(m^2n)$\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u8ba1\u7b97 left \u77e9\u9635\u9700\u8981 O(mn) \u7684\u65f6\u95f4\u3002\u968f\u540e\u5bf9\u4e8e\u77e9\u9635\u7684\u6bcf\u4e2a\u70b9\uff0c\u9700\u8981 O(m) \u7684\u65f6\u95f4\u679a\u4e3e\u9ad8\u5ea6\u3002\u6545\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$ O(mn)+O(mn)\u22c5O(m)=O(m^2n)$\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(mn)$\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u6211\u4eec\u5206\u914d\u4e86\u4e00\u4e2a\u4e0e\u7ed9\u5b9a\u77e9\u9635\u7b49\u5927\u7684\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u8fde\u7eed 1 \u7684\u6570\u91cf\u3002</p>"},{"location":"algorithm/leetcode/#_16","title":"\u89e3\u6cd5\u4e8c\uff1a\u5355\u8c03\u6808","text":"<p>\u540c84 \u4e00\u6837\uff0c\u9700\u8981\u6c42\u51fa\u67f1\u5f62\u56fe\u6700\u5c0f\u7684\u9ad8\u5ea6\uff08\u4ee3\u7801\u4e2d\u4e3a\u5bbd\u5ea6\uff09</p> <p>\u4e0e84\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u672c\u9898\u53ef\u4ee5\u62c6\u5206\u4e3am\u5217 \u67f1\u5f62\u56fe\uff0c\u5c0684\u9898\u7684\u4ee3\u7801\u5904\u7406m\u6b21\u5373\u53ef</p> <pre><code>class Solution {\npublic:\n    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        int m = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; left(n, vector&lt;int&gt;(m, 0));\n        for(int i = 0; i &lt; n; i++){\n            for(int j = 0; j &lt; m; j++){\n                if(matrix[i][j] == '1')\n                    left[i][j] = (j == 0 ? 0 : left[i][j - 1]) + 1;\n            }\n        }\n        int ans = 0;\n        int len = n + 2;\n        // \u679a\u4e3e\u6bcf\u4e00\u5217\n        for(int j = 0; j &lt; m; j++){\n            stack&lt;int&gt; stk;\n            int area = 0;        \n            vector&lt;int&gt; ll(len);\n            ll[0] = 0;\n            ll[len - 1] = 0;\n            // \u521d\u59cb\u5316\u522b\u5f04\u53cd\u4e86\uff0c\u662fleft[k - 1][j]\uff0c\u4e0d\u662fleft[j][k - 1]\n            for(int k = 1; k &lt; len - 1; k++)\n                ll[k] = left[k - 1][j];\n            for(int i = 0; i &lt; len; i++){\n                while(!stk.empty() &amp;&amp; ll[i] &lt; ll[stk.top()]){\n                    int idx = stk.top();\n                    stk.pop();\n                    int w = i - stk.top() - 1;\n                    area = max(area, w * ll[idx]);\n                }\n                stk.push(i);\n            }\n            ans = max(ans, area);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u8ba1\u7b97 left \u77e9\u9635\u9700\u8981 O(mn) \u7684\u65f6\u95f4\uff1b\u5bf9\u6bcf\u4e00\u5217\u5e94\u7528\u67f1\u72b6\u56fe\u7b97\u6cd5\u9700\u8981 O(m) \u7684\u65f6\u95f4\uff0c\u4e00\u5171\u9700\u8981 O(mn) \u7684\u65f6\u95f4\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\uff0c\u5176\u4e2d m \u548c n \u5206\u522b\u662f\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u6211\u4eec\u5206\u914d\u4e86\u4e00\u4e2a\u4e0e\u7ed9\u5b9a\u77e9\u9635\u7b49\u5927\u7684\u6570\u7ec4\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u5143\u7d20\u7684\u5de6\u8fb9\u8fde\u7eed 1 \u7684\u6570\u91cf\u3002</p>"},{"location":"algorithm/leetcode/#112","title":"112 \u8def\u5f84\u603b\u548c","text":"<p>https://leetcode.cn/problems/path-sum/description/</p>"},{"location":"algorithm/leetcode/#_17","title":"\u505a\u6cd5\uff1a\u9012\u5f52","text":"<p>\u672c\u505a\u6cd5\u4e2d\u7684targetSum\u4e3a\u5254\u9664\u6389\u5f53\u524d\u8282\u70b9\u5269\u4f59\u7684targetSum\uff0c\u5373\u5de6/\u53f3\u8282\u70b9\u5230\u8fbe\u5b50\u8282\u70b9\u9700\u8981\u8d70\u7684\u8def\u5f84\u548c</p>"},{"location":"algorithm/leetcode/#_18","title":"\u601d\u8def\u7248","text":"<p>\u8be5\u7248\u672c\u6ca1\u6709\u600e\u4e48\u7b80\u5316\uff0c\u7740\u91cd\u4e8e\u8be6\u7ec6\u7684\u601d\u8def</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    bool dfs(TreeNode* root, int targetSum){\n        // \u5224\u65ad\u662f\u5426\u5b58\u5728\u5de6\u8282\u70b9\n        if(root-&gt;left){\n            // \u5982\u679c\u5de6\u8282\u70b9\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\uff0c\u90a3\u4e48\u5f53\u524d\u8282\u70b9\u4e5f\u5b58\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u8def\u5f84\n            if(dfs(root-&gt;left, targetSum - root-&gt;left-&gt;val))\n                return true;\n        }\n        // \u53f3\u8282\u70b9\u540c\u7406\n        if(root-&gt;right){\n            if(dfs(root-&gt;right, targetSum - root-&gt;right-&gt;val))\n                return true;\n        }\n        // \u5982\u679c\u5f53\u524d\u8282\u70b9\u4e3a\u53f6\u5b50\u8282\u70b9\n        if(!root-&gt;left &amp;&amp; !root-&gt;right){\n            if(targetSum == 0)\n                return true;\n            else \n                return false;\n        }\n        return false;       \n    }\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        // \u5982\u679c\u6839\u8282\u70b9\u6ca1\u7a7a\uff0c\u4e0d\u5b58\u5728\u9898\u89e3\n        if(!root)\n            return false;\n        return dfs(root, targetSum - root-&gt;val);\n    }\n};\n</code></pre> <p>\u6216\u5199\u6210</p> <pre><code>class Solution {\nprivate:\n    bool traversal(TreeNode* cur, int count) {\n        if (!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; count == 0) return true; // \u9047\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5e76\u4e14\u8ba1\u6570\u4e3a0\n        if (!cur-&gt;left &amp;&amp; !cur-&gt;right) return false; // \u9047\u5230\u53f6\u5b50\u8282\u70b9\u76f4\u63a5\u8fd4\u56de\n\n        if (cur-&gt;left) { // \u5de6\n            count -= cur-&gt;left-&gt;val; // \u9012\u5f52\uff0c\u5904\u7406\u8282\u70b9;\n            if (traversal(cur-&gt;left, count)) return true;\n            count += cur-&gt;left-&gt;val; // \u56de\u6eaf\uff0c\u64a4\u9500\u5904\u7406\u7ed3\u679c\n        }\n        if (cur-&gt;right) { // \u53f3\n            count -= cur-&gt;right-&gt;val; // \u9012\u5f52\uff0c\u5904\u7406\u8282\u70b9;\n            if (traversal(cur-&gt;right, count)) return true;\n            count += cur-&gt;right-&gt;val; // \u56de\u6eaf\uff0c\u64a4\u9500\u5904\u7406\u7ed3\u679c\n        }\n        return false;\n    }\n\npublic:\n    bool hasPathSum(TreeNode* root, int sum) {\n        if (root == NULL) return false;\n        return traversal(root, sum - root-&gt;val);\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#_19","title":"\u7b80\u5316\u7248","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasPathSum(TreeNode* root, int targetSum) {\n        if(root == NULL) return false;\n        if(!root-&gt;left &amp;&amp; !root-&gt;right &amp;&amp; targetSum == root-&gt;val)   return true;\n        return hasPathSum(root-&gt;left, targetSum - root-&gt;val) || hasPathSum(root-&gt;right, targetSum - root-&gt;val);\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#121","title":"121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":"<p>\u8d2a\u5fc3\uff1a\u627e\u51fa\u6700\u4f4e\u7684\u4ef7\u683c\u4e70\u5165\uff0c\u627e\u51fa\u6700\u9ad8\u7684\u4ef7\u683c\u4e70\u51fa</p> <pre><code>class Solution {\npublic:\n    int maxProfit(vector&lt;int&gt;&amp; prices) {\n        int cost = INT_MAX, profit = 0;\n        for(int i = 0;i &lt; prices.size(); i++){\n            cost = min(cost, prices[i]);\n            profit = max(profit, prices[i] - cost);\n        }\n        return profit;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#141","title":"141 \u73af\u5f62\u94fe\u8868","text":"<p>\u6839\u636e\u9898\u610f\uff1a\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u73af</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        if(head == nullptr || head-&gt;next == nullptr)\n            return false;\n        ListNode* fast = head, *slow = head;\n        while(true){\n            if(fast == nullptr || fast-&gt;next == nullptr)\n                return false;\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if(fast == slow) \n                break;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#142-ii","title":"142 \u73af\u5f62\u94fe\u8868II","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        if(head == nullptr || head-&gt;next == nullptr)\n            return nullptr;\n        ListNode* fast = head, *slow = head;\n        while(true){\n            if(fast == nullptr || fast-&gt;next == nullptr)\n                return nullptr;\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n            if(fast == slow)    break;\n        }\n        fast = head;\n        while(slow != fast){\n            fast = fast-&gt;next;\n            slow = slow-&gt;next;\n        }\n        return fast;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#160","title":"160 \u76f8\u4ea4\u94fe\u8868","text":"<p>https://leetcode.cn/problems/intersection-of-two-linked-lists/?envType=study-plan-v2&amp;envId=top-100-liked</p> <p>\u62fc\u63a5\u94fe\u8868A\u548c\u94fe\u8868B\uff0c\u62fc\u63a5\u540e\uff0c\u4e24\u4e2a\u94fe\u8868\u540c\u65f6\u5f00\u59cb\u5f80\u5c3e\u90e8\u904d\u5386\uff0c</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        ListNode* a = headA, *b = headB;\n        while(a != b){\n            a = a != nullptr ? a-&gt;next : headB;\n            b = b != nullptr ? b-&gt;next : headA;\n        }\n        return a;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#200","title":"200 \u5c9b\u5c7f\u6570\u91cf","text":"<p>\u9898\u89e3\u4e2d\u8fd9\u91cc\u4fee\u6539\u4e86\u539f\u6570\u7ec4\uff0c\u5927\u5bb6\u5982\u679c\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u8981\u95ee\u6e05\u695a\u9762\u8bd5\u5b98\u662f\u5426\u80fd\u4fee\u6539\u539f\u6570\u7ec4\uff0c\u4e0d\u80fd\u7684\u8bdd\u5c31\u5f97\u52a0\u5165\u6807\u8bb0\u6570\u7ec4\uff0c\u4e0d\u8981\u4e00\u7ed9\u9898\u5c31\u76f4\u63a5\u4e0a\u624b</p>"},{"location":"algorithm/leetcode/#dfs","title":"\u89e3\u6cd5\u4e00\uff1a dfs","text":"<p>\u6211\u7684\u89e3\u6cd5</p> <pre><code>class Solution {\nprivate:\n    int dx[4] = {-1, 0, 1, 0};\n    int dy[4] = {0, 1, 0, -1};\n    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; isVisited, int x,\n             int y) {\n        int n = grid.size();\n        int m = grid[0].size();\n        for (int i = 0; i &lt; 4; i++) {\n            int a = x + dx[i];\n            int b = y + dy[i];\n            if (a &gt;= 0 &amp;&amp; a &lt; n &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; m &amp;&amp; grid[a][b] == '1' &amp;&amp;\n                !isVisited[a][b]) {\n                isVisited[a][b] = true;\n                dfs(grid, isVisited, a, b);\n            }\n        }\n    }\n\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; isVisited(n, vector&lt;bool&gt;(m, false));\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (grid[i][j] == '1' &amp;&amp; !isVisited[i][j]) {\n                    ans++;\n                    isVisited[i][j] = true;\n                    dfs(grid, isVisited, i, j);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(MN)\uff0c\u5176\u4e2d M \u548c N \u5206\u522b\u4e3a\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(MN)\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6574\u4e2a\u7f51\u683c\u5747\u4e3a\u9646\u5730\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u6df1\u5ea6\u8fbe\u5230 MN\u3002</p>"},{"location":"algorithm/leetcode/#bfs","title":"\u89e3\u6cd5\u4e8c\uff1a bfs","text":"<p>\u6211\u7684\u89e3\u6cd5</p> <p>\u4e0edfs\u7c7b\u4f3c</p> <pre><code>class Solution {\nprivate:\n    typedef pair&lt;int,int&gt; PII;\n    int dx[4] = {-1, 0, 1, 0};\n    int dy[4] = {0, 1, 0, -1};\n    void bfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; isVisited, int x, int y){\n        int n = grid.size();\n        int m = grid[0].size();\n        queue&lt;PII&gt; q;\n        q.push({x, y});\n        while(!q.empty()){\n            auto t = q.front();\n            q.pop();\n            for(int i = 0; i &lt; 4; i++){\n                int a = t.first + dx[i];\n                int b = t.second + dy[i];\n                if(a &gt;= 0 &amp;&amp; a &lt; n &amp;&amp; b &gt;=0 &amp;&amp; b &lt; m &amp;&amp; grid[a][b] == '1' &amp;&amp; !isVisited[a][b]){\n                    isVisited[a][b] = true;\n                    q.push({a, b});\n                }\n            }\n        }\n    }\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; isVisited(n, vector&lt;bool&gt;(m, false));\n        int ans = 0;\n        for(int i = 0; i &lt; n; i++){\n            for(int j = 0; j &lt; m; j++){\n                if(grid[i][j] == '1' &amp;&amp; !isVisited[i][j]){\n                    ans++;\n                    bfs(grid, isVisited, i, j);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(MN)\uff0c\u5176\u4e2d M \u548c N \u5206\u522b\u4e3a\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(min(M,N))\uff0c\u5728\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u6574\u4e2a\u7f51\u683c\u5747\u4e3a\u9646\u5730\uff0c\u961f\u5217\u7684\u5927\u5c0f\u53ef\u4ee5\u8fbe\u5230 min(M,N)\u3002</p>"},{"location":"algorithm/leetcode/#_20","title":"\u89e3\u6cd5\u4e09\uff1a \u5e76\u67e5\u96c6","text":"<pre><code>class Solution {\nprivate:\n    vector&lt;int&gt; p;\n    vector&lt;bool&gt; isVisited;\n    int res;\n    int dx[4] = {-1, 0, 1, 0};\n    int dy[4] = {0, 1, 0, -1};\n    int Find(int x) {\n        if (p[x] != x)\n            p[x] = Find(p[x]);\n        return p[x];\n    }\n    void Union(int x, int y) {\n        // \u6bcf\u6b21\u5408\u5e76\u90fd\u8981res\u51cf\u4e00\uff0c\u56e0\u6b64\u5982\u679c\u5408\u5e76\u8fc7\u76f4\u63a5\u8df3\u8fc7\uff0c\u4ee5\u514dres\u591a\u51cf\n        if (Find(x) == Find(y))\n            return;\n        p[Find(x)] = Find(y);\n        res--;\n    }\n\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        p.resize(n * m);\n        isVisited.resize(n * m);\n        res = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                int idx = i * m + j;\n                if (grid[i][j] == '1') {\n                    p[idx] = idx;\n                    res++;\n                }\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                int idx = i * m + j;\n                if (grid[i][j] == '1') {\n                    // \u53ea\u6709\u8fd9\u4e2a\u5730\u65b9\u9700\u8981\u6807\u8bb0\u5df2\u904d\u5386\n                    isVisited[idx] = true;\n                    for (int k = 0; k &lt; 4; k++) {\n                        int a = i + dx[k];\n                        int b = j + dy[k];\n                        if (a &gt;= 0 &amp;&amp; a &lt; n &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; m &amp;&amp;\n                            grid[a][b] == '1' &amp;&amp; !isVisited[a * m + b]) {\n                            // \u8fd9\u91cc\u4e0d\u9700\u8981\u6807\u8bb0\u904d\u5386\uff0c\u56e0\u4e3aUnion\u4e0d\u4f1a\u7ee7\u7eed\u5f80\u4e0b\u8bbf\u95ee\u4e0b\u4e00\u4e2a\u8282\u70b9\n                            // \u4e0d\u662f\u9012\u5f52\u51fd\u6570\uff01\n                            Union(idx, a * m + b);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(MN\u00d7\u03b1(MN))\uff0c\u5176\u4e2d M \u548c N \u5206\u522b\u4e3a\u884c\u6570\u548c\u5217\u6570\u3002\u6ce8\u610f\u5f53\u4f7f\u7528\u8def\u5f84\u538b\u7f29\uff08\u89c1 find \u51fd\u6570\uff09\u548c\u6309\u79e9\u5408\u5e76\uff08\u89c1\u6570\u7ec4 rank\uff09\u5b9e\u73b0\u5e76\u67e5\u96c6\u65f6\uff0c\u5355\u6b21\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u03b1(MN)\uff0c\u5176\u4e2d \u03b1(x) \u4e3a\u53cd\u963f\u514b\u66fc\u51fd\u6570\uff0c\u5f53\u81ea\u53d8\u91cf x \u7684\u503c\u5728\u4eba\u7c7b\u53ef\u89c2\u6d4b\u7684\u8303\u56f4\u5185\uff08\u5b87\u5b99\u4e2d\u7c92\u5b50\u7684\u6570\u91cf\uff09\u65f6\uff0c\u51fd\u6570 \u03b1(x) \u7684\u503c\u4e0d\u4f1a\u8d85\u8fc7 5\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u770b\u6210\u662f\u5e38\u6570\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(MN)\uff0c\u8fd9\u662f\u5e76\u67e5\u96c6\u9700\u8981\u4f7f\u7528\u7684\u7a7a\u95f4\u3002</p> <p>\u6211\u6ca1\u6709\u4f7f\u7528\u6309\u79e9\u5408\u5e76</p>"},{"location":"algorithm/leetcode/#206","title":"206 \u53cd\u8f6c\u94fe\u8868","text":""},{"location":"algorithm/leetcode/#_21","title":"\u8fed\u4ee3\u7248","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* cur = head;\n        while(cur){\n            ListNode* next = cur-&gt;next;\n            cur-&gt;next = prev;\n            prev = cur;\n            cur = next;\n        }\n        // cur\u6307\u5411nullptr, prev\u6307\u5411\u539f\u94fe\u8868\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff08\u65b0\u94fe\u8868\u5934\u8282\u70b9\uff09\n        return prev;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002\u9700\u8981\u904d\u5386\u94fe\u8868\u4e00\u6b21\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"algorithm/leetcode/#_22","title":"\u9012\u5f52\u7248","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if(!head || !head-&gt;next)\n            return head;\n        ListNode* newHead = reverseList(head-&gt;next);\n        head-&gt;next-&gt;next = head;\n        head-&gt;next = nullptr;\n        return newHead;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002\u9700\u8981\u5bf9\u94fe\u8868\u7684\u6bcf\u4e2a\u8282\u70b9\u8fdb\u884c\u53cd\u8f6c\u64cd\u4f5c\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u94fe\u8868\u7684\u957f\u5ea6\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u9012\u5f52\u8c03\u7528\u7684\u6808\u7a7a\u95f4\uff0c\u6700\u591a\u4e3a n \u5c42\u3002</p>"},{"location":"algorithm/leetcode/#209","title":"209 \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>https://leetcode.cn/problems/minimum-size-subarray-sum/description/</p> <p>\u9898\u76ee\u5173\u952e\u5728\u4e8e\uff1a\u8fd9\u4e2a\u5b50\u6570\u7ec4\u662f\u8fde\u7eed\u7684</p>"},{"location":"algorithm/leetcode/#_23","title":"\u89e3\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e","text":"<p>\u5148\u679a\u4e3e\u5b50\u6570\u7ec4\u7684\u8d77\u70b9\uff0c\u518d\u5f80\u540e\u679a\u4e3e\uff0c\u6ee1\u8db3sum &gt;= target\u505c\u6b62\uff0c\u8ba1\u7b97\u5b50\u6570\u7ec4\u957f\u5ea6 j - i + 1</p> <pre><code>class Solution {\nprivate:\n    const int INF = 0x3f3f3f3f;\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int ans = INF;\n        for(int i = 0; i &lt; n; i++){\n            int sum = 0;\n            for(int j = i; j &lt; n; j++){\n                sum += nums[j];\n                if(sum &gt;= target)\n                    ans = min(ans, j - i + 1);\n            }\n        }\n        if(ans == INF) \n            return 0;\n        else\n            return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$\uff0c\u5176\u4e2d n \u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u4e0b\u6807\u4f5c\u4e3a\u5b50\u6570\u7ec4\u7684\u5f00\u59cb\u4e0b\u6807\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5f00\u59cb\u4e0b\u6807\uff0c\u9700\u8981\u904d\u5386\u5176\u540e\u9762\u7684\u4e0b\u6807\u5f97\u5230\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</p>"},{"location":"algorithm/leetcode/#_24","title":"\u89e3\u6cd5\u4e8c\uff1a \u524d\u7f00\u548c + \u4e8c\u5206\u67e5\u627e","text":"<p>\u89e3\u6cd5\u4e00\u679a\u4e3e\u8d77\u70b9\u4e4b\u540e\u53c8\u5411\u540e\u679a\u4e3e\u4e86n\u4e2a\u5143\u7d20\u624d\u627e\u5230sum &gt;= target</p> <p>\u7531\u4e8e\u672c\u9898\u9650\u5b9a\u4e86\u201c\u6b63\u6574\u6570\u5143\u7d20\u201d\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u627e\u5230\u7b2c\u4e00\u4e2a\u6ee1\u8db3sum &gt;= target\u7684\u5143\u7d20\uff0c\u663e\u7136\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e</p> <p>\u6211\u4eec\u7684\u76ee\u6807\u662fsum &gt;= target \u800c\u4e0d\u662fnum &gt;= target\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3a\u672b\u5c3e\u65f6\u7684sum[i]</p> <p>\u56e0\u6b64\u60f3\u5230\u524d\u7f00\u548c</p> <pre><code>class Solution {\nprivate:\n    const int INF = 0x3f3f3f3f;\n\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; s(n + 1);\n        //  \u8ba1\u7b97\u524d\u7f00\u548c\n        for (int i = 1; i &lt;= n; i++) {\n            // \u8fd9\u91cc\u539f\u672c\u662fnums[i]\uff0c\u4f46\u662fnums\u548cs\u7684\u4e0b\u6807\u4e4b\u95f4\u504f\u79fb\u4e861\n            s[i] = s[i - 1] + nums[i - 1];\n        }\n        int ans = INF;\n        // \u904d\u5386\u8d77\u70b9\uff0c\u7531\u4e8e\u662f\u904d\u5386\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u4e0b\u6807\u53ef\u76f4\u63a5\u4ece1\u5f00\u59cb\n        for (int i = 1; i &lt;= n; i++) {\n            // \u6211\u4eec\u8981\u627e\u5230sum &gt;= target\n            // sum = s[idx] - s[i - 1]\n            // \u56e0\u6b64\u4e8c\u5206\u67e5\u627e\u7684\u76ee\u6807\u4e3a\u5728\u6570\u7ec4s\u4e2d\u627e\u5230\u5927\u4e8e\u7b49\u4e8etarget + s[i -\n            // 1]\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n            int t = target + s[i - 1];\n            auto it = lower_bound(s.begin(), s.end(), t);\n            if (it != s.end()) {\n                int idx = distance(s.begin(), it);\n                ans = min(ans, idx - i + 1);\n            }\n        }\n        return ans == INF ? 0 : ans;\n    }\n};\n</code></pre> <p>\u4e8c\u5206\u81ea\u5df1\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>class Solution {\nprivate:\n    const int INF = 0x3f3f3f3f;\n\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; s(n + 1);\n        //  \u8ba1\u7b97\u524d\u7f00\u548c\n        for (int i = 1; i &lt;= n; i++) {\n            // \u8fd9\u91cc\u539f\u672c\u662fnums[i]\uff0c\u4f46\u662fnums\u548cs\u7684\u4e0b\u6807\u4e4b\u95f4\u504f\u79fb\u4e861\n            s[i] = s[i - 1] + nums[i - 1];\n        }\n        int ans = INF;\n        // \u904d\u5386\u8d77\u70b9\uff0c\u7531\u4e8e\u662f\u904d\u5386\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u4e0b\u6807\u53ef\u76f4\u63a5\u4ece1\u5f00\u59cb\n        for (int i = 1; i &lt;= n; i++) {\n            // \u6211\u4eec\u8981\u627e\u5230sum &gt;= target\n            // sum = s[idx] - s[i - 1]\n            // \u56e0\u6b64\u4e8c\u5206\u67e5\u627e\u7684\u76ee\u6807\u4e3a\u5728\u6570\u7ec4s\u4e2d\u627e\u5230\u5927\u4e8e\u7b49\u4e8etarget + s[i - 1]\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n            int t = target + s[i - 1];\n            int l = i, r = n;\n            while(l &lt; r){\n                int mid = l + r &gt;&gt; 1;\n                if(s[mid] &gt;= t) r = mid;\n                else l = mid + 1;\n            }\n            if(s[l] &gt;= t)\n                ans = min(ans, l - i + 1);\n        }\n        return ans == INF ? 0 : ans;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#_25","title":"\u89e3\u6cd5\u4e09\uff1a\u79fb\u52a8\u7a97\u53e3","text":"<p>\u7531\u4e8e\u9898\u76ee\u7684\u5b50\u6570\u7ec4\u662f\u8fde\u7eed\u7684\u5e8f\u5217\uff0c\u6c42sum &gt;= target\u5b50\u6570\u7ec4\u957f\u5ea6\u6700\u5c0f\u503c\uff0c\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u5b50\u6570\u7ec4\u6ed1\u52a8\u65f6\u7684\u6700\u5c0f\u503c &gt;= target</p> <p>\u60f3\u8ba9\u5b50\u6570\u7ec4\u957f\u5ea6\u6700\u5c0f\uff0c\u610f\u5473\u7740\u8fd9\u4e2a\u79fb\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\u4e0d\u5b9a\uff0c\u56e0\u6b64\u79fb\u52a8\u7a97\u53e3\u7684\u5934\u90e8\u4e5f\u9700\u8981\u6539\u53d8</p> <p>\u52a0\u8fdb\u4e00\u4e2a\u5143\u7d20</p> <pre><code>class Solution {\nprivate:\n    const int INF = 0x3f3f3f3f;\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int start = 0, end = 0;\n        int ans = INF;\n        int sum = 0;\n        while(end &lt; n){\n            sum += nums[end];\n            while(sum &gt;= target){\n                ans = min(ans, end - start + 1);\n                sum -= nums[start];\n                start++;\n            }\n            end++;\n        }\n        return ans == INF ? 0 : ans;\n    }\n};\n</code></pre> <p>\u4ee5\u4e0a\u662f\u53cc\u6307\u9488\u505a\u6cd5</p> <p>\u5982\u679c\u5957\u6a21\u677f\uff0c\u4f7f\u7528\u961f\u5217\u89e3\u51b3\uff0c\u5219\u662f\uff1a</p> <pre><code>class Solution {\nprivate:\n    const int INF = 0x3f3f3f3f;\npublic:\n    int minSubArrayLen(int target, vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        queue&lt;int&gt; q;\n        int sum = 0;\n        int ans = INF;\n        for(int i = 0; i &lt; n; i++){\n            // \u5148\u52a0nums[i] \u518d\u5bf9\u961f\u5934\u8fdb\u884c\u5224\u65ad\n            q.push(i);\n            sum += nums[i];\n            // \u5904\u7406\u961f\u5934\n            while(!q.empty() &amp;&amp; sum &gt;= target){\n                sum -= nums[q.front()];\n                ans = min(ans, q.back() - q.front() + 1);\n                q.pop();\n            }\n        }\n        return ans == INF ? 0 : ans;\n    }\n};\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u961f\u5217\u7684\u5934\u662f\u65e9\u52a0\u5165\u7684\u5143\u7d20\uff0c\u5c3e\u662f\u521a\u521a\u52a0\u5165\u7684\u5143\u7d20\uff0c\u5373\u5934\u5bf9\u5e94start\uff0c\u5c3e\u5bf9\u5e94end</p>"},{"location":"algorithm/leetcode/#234","title":"234 \u56de\u6587\u94fe\u8868","text":"<p>https://leetcode.cn/problems/palindrome-linked-list/solutions/457059/hui-wen-lian-biao-by-leetcode-solution/?envType=study-plan-v2&amp;envId=top-100-liked</p>"},{"location":"algorithm/leetcode/#_26","title":"\u9012\u5f52\u7248","text":"<p>\u5229\u7528\u51fd\u6570\u9012\u5f52\u7279\u6027\uff0c\u5f53\u51fd\u6570\u904d\u5386\u5230\u6700\u5e95\u5c42\u9047\u5230\u7ec8\u6b62\u6761\u4ef6\u624d\u4f1a\u8fd4\u56de\uff0c\u7ec8\u6b62\u6761\u4ef6\u8bbe\u7f6e\u4e3anullptr\uff0c\u5219\u51fd\u6570\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u624d\u4f1a\u8fd4\u56de</p> <p>\u6b64\u65f6\u6211\u4eec\u8bbe\u7f6efirstPointer\u6307\u5411\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u5f53\u51fd\u6570\u5f00\u59cb\u8fd4\u56de\u65f6\uff0c\u5c06curNode\u4e0efirstPointer\u7684\u503c\u8fdb\u884c\u6bd4\u8f83</p> <p>\u5982\u679c\u67d0\u6b21\u6bd4\u8f83\u53d1\u73b0\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u8bf4\u660e\u4e0d\u662f\u56de\u6587\u94fe\u8868\uff0c\u9700\u8981\u5411\u4e0a\u4f20\u9012\u7ed3\u679c\uff0c\u56e0\u6b64\u8fd4\u56de\u503c\u8bbe\u7f6e\u4e3abool\u7c7b\u578b</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* firstPointer;\npublic:\n    bool recursivelyCheck(ListNode* curNode){\n        if(!curNode)\n            return true;\n        if(!recursivelyCheck(curNode-&gt;next))\n            return false;\n        if(firstPointer-&gt;val != curNode-&gt;val)\n            return false;\n        firstPointer = firstPointer-&gt;next;\n        return true;\n    }\n    bool isPalindrome(ListNode* head) {\n        firstPointer = head;\n        return recursivelyCheck(head);\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u6307\u7684\u662f\u94fe\u8868\u7684\u5927\u5c0f\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u6307\u7684\u662f\u94fe\u8868\u7684\u5927\u5c0f\u3002</li> </ul>"},{"location":"algorithm/leetcode/#_27","title":"\u8fed\u4ee3\u7248","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\nprivate:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* cur = head;\n        while (cur) {\n            ListNode* next = cur-&gt;next;\n            cur-&gt;next = prev;\n            prev = cur;\n            cur = next;\n        }\n        return prev;\n    }\n    ListNode* getFirstEnd(ListNode* head) {\n        ListNode *fast = head, *slow = head;\n        while (fast-&gt;next != nullptr &amp;&amp; fast-&gt;next-&gt;next != nullptr) {\n            fast = fast-&gt;next-&gt;next;\n            slow = slow-&gt;next;\n        }\n        return slow;\n    }\n\npublic:\n    bool isPalindrome(ListNode* head) {\n        if (!head)\n            return true;\n        ListNode* firstEnd = getFirstEnd(head);\n        ListNode* secondHead = reverseList(firstEnd-&gt;next);\n        ListNode *p1 = head, *p2 = secondHead;\n        while (p2) {\n            if (p1-&gt;val != p2-&gt;val)\n                return false;\n            p1 = p1-&gt;next;\n            p2 = p2-&gt;next;\n        }\n        // \u5982\u679c\u9700\u8981\u6062\u590d\u539f\u72b6\n        firstEnd-&gt;next = reverseList(secondHead);\n        return true;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u6307\u7684\u662f\u94fe\u8868\u7684\u5927\u5c0f\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002\u6211\u4eec\u53ea\u4f1a\u4fee\u6539\u539f\u672c\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u6307\u5411\uff0c\u800c\u5728\u5806\u6808\u4e0a\u7684\u5806\u6808\u5e27\u4e0d\u8d85\u8fc7 O(1)\u3002</p>"},{"location":"algorithm/leetcode/#240-ii","title":"240 \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635II","text":"<p>https://leetcode.cn/problems/search-a-2d-matrix-ii/description/</p>"},{"location":"algorithm/leetcode/#_28","title":"\u89e3\u6cd5\u4e00\uff1a\u66b4\u529b\u679a\u4e3e","text":"<p>\u65e0\u8111\u89e3\u6cd5\uff0c\u6ca1\u6709\u5229\u7528\u9898\u610f\u201c\u5347\u5e8f\u201d</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        for(int i = 0; i &lt; matrix.size(); i++){\n            for(int j = 0; j &lt; matrix[i].size(); j++){\n                if(matrix[i][j] == target)\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(mn)\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\u3002</li> </ul>"},{"location":"algorithm/leetcode/#_29","title":"\u89e3\u6cd5\u4e8c\uff1a\u4e8c\u5206\u67e5\u627e","text":"<p>\u5229\u7528\u9898\u610f\u201c\u5347\u5e8f\u201d\u53ef\u76f4\u63a5\u4e8c\u5206\u67e5\u627e</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        // \u8fd9\u91cc\u8981\u7528\u5f15\u7528\uff0c\u4e0d\u7136\u4f1a\u62a5\u5185\u5b58\u8d85\u51fa\n        for(const auto &amp;row : matrix){\n            auto it = lower_bound(row.begin(), row.end(), target);\n            if(it != row.end() &amp;&amp; *it == target)   return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#_30","title":"\u89e3\u6cd5\u4e09\uff1a","text":"<p>https://leetcode.cn/problems/search-a-2d-matrix-ii/solutions/2361487/240-sou-suo-er-wei-ju-zhen-iitan-xin-qin-7mtf</p> <p>\u5c06\u77e9\u9635\u9006\u65f6\u9488\u65cb\u8f6c45\u5ea6\uff0c\u5c06\u5176\u53d8\u6210\u4e8c\u53c9\u641c\u7d22\u6811</p> <p>\u4ee5\u53f3\u4e0a\u89d2\u4e3a\u6839\u8282\u70b9</p> <p>\u5982\u679c\u8d85\u51fa\u8fb9\u754c\uff0c\u8bf4\u660e\u65e0\u89e3</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int i = 0, j = matrix[0].size() - 1;\n        while(i &lt;= matrix.size() - 1 &amp;&amp; j &gt;= 0 ){\n            if(matrix[i][j] == target) return true;\n            if(matrix[i][j] &lt; target) i++;\n            else j--;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#279","title":"279 \u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u601d\u8def\uff1a</p> <p>\u9898\u76ee\u8981\u6c42\u548c\u4e3ai\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u6700\u5c0f\u6570\u91cf</p> <p>\u5047\u8bbe\u9009\u62e9\u4e86j (j &lt;= i)\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u8981\u627e\u7684\u5c31\u662f\u548c\u4e3ai - j*j\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u6700\u5c0f\u6570\u91cf</p> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u72b6\u6001\u9012\u63a8\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212</p> <p>f[i - j* j]\u4e0b\u6807\u6bd4f[i]\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u904d\u5386</p> <pre><code>class Solution {\npublic:\n    int numSquares(int n) {\n        // dp[i]\u8868\u793a\u548c\u4e3ai\u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf\n        // dp[0] = 0\n        vector&lt;int&gt; dp(n + 1, 0);\n        for(int i = 1; i &lt;= n; i++){\n            // \u679a\u4e3e\u5b8c\u5168\u5e73\u65b9\u6570\n            dp[i] = INT_MAX;\n            for(int j = 1; j * j &lt;=i; j++){\n                dp[i] = min(dp[i],1 + dp[i - j * j]);\n            }\n        }\n        return dp[n];\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#503-ii","title":"503 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20II","text":"<p>https://leetcode.cn/problems/next-greater-element-ii/description/</p> <p>\u904d\u5386\u4e00\u904d\u6570\u7ec4\u663e\u7136\u4e0d\u591f\uff0c\u53ef\u590d\u5236\u4e00\u4efd\u6570\u7ec4\u62fc\u63a5\u5728\u539f\u6570\u7ec4\u672b\u5c3e\uff0c\u5b9e\u73b0\u5faa\u73af\u6570\u7ec4</p> <p>\u5b9e\u9645\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u590d\u5236\uff0c\u53ea\u9700\u8981\u904d\u5386\u4e24\u6b21\u6570\u7ec4\u5373\u53ef\uff0ci % n \u5bf9\u5e94nums\u7684\u4e0b\u6807</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; nextGreaterElements(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        stack&lt;int&gt; stk;\n        vector&lt;int&gt; ans(n, -1);\n        for (int i = 0; i &lt; 2 * n - 1; i++) {\n            while (!stk.empty() &amp;&amp; nums[i % n] &gt; nums[stk.top()]) {\n                ans[stk.top()] = nums[i % n];\n                stk.pop();\n            }\n            stk.push(i % n);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6: O(n)\uff0c\u5176\u4e2d n \u662f\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u6211\u4eec\u9700\u8981\u904d\u5386\u8be5\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u6700\u591a 2 \u6b21\uff0c\u6bcf\u4e2a\u5143\u7d20\u51fa\u6808\u4e0e\u5165\u6808\u7684\u603b\u6b21\u6570\u4e5f\u4e0d\u8d85\u8fc7 4 \u6b21\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\uff0c\u5176\u4e2d n \u662f\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3b\u8981\u53d6\u51b3\u4e8e\u6808\u7684\u5927\u5c0f\uff0c\u6808\u7684\u5927\u5c0f\u81f3\u591a\u4e3a 2n\u22121\u3002</p>"},{"location":"algorithm/leetcode/#509","title":"509 \u6590\u6ce2\u90a3\u5951\u6570","text":"<p>https://leetcode.cn/problems/fibonacci-number/description/</p> <p>\u548c\u722c\u697c\u68af\u7c7b\u4f3c\uff0c\u4e0d\u8d58\u8ff0</p>"},{"location":"algorithm/leetcode/#547","title":"547 \u7701\u4efd\u6570\u91cf","text":""},{"location":"algorithm/leetcode/#dfs_1","title":"\u89e3\u6cd5\u4e00\uff1adfs","text":"<p>\u672c\u9898nxn\u77e9\u9635\u53ef\u89c6\u4f5c\u90bb\u63a5\u77e9\u9635\uff0c\u5bf9\u5176\u53ef\u4ee5\u8fdb\u884c\u56fe\u8bba\u7684dfs\u6216bfs\u904d\u5386\uff0c\u627e\u51fa\u6240\u6709\u7684\u8fde\u901a\u5206\u91cf</p> <p>\u5173\u952e\u5728\u4e8e\u5982\u679c\u8ba1\u7b97\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570\uff1a\u5982\u679c\u7b2ci - 1\u6b21dfs\u904d\u5386\u540e\u4ecd\u6709\u8282\u70b9\u6ca1\u6709\u88ab\u904d\u5386\uff0c\u8bf4\u660e\u5176\u5c5e\u4e8e\u65b0\u7684\u8fde\u901a\u5206\u91cf</p> <pre><code>class Solution {\nprivate:\n    void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected, vector&lt;bool&gt;&amp; isVisited, int idx){\n        for(int j = 0; j &lt; isConnected[idx].size(); j++){\n            if(isConnected[idx][j] &amp;&amp; !isVisited[j]){\n                isVisited[j] = true;\n                dfs(isConnected, isVisited, j);\n            }\n        }\n    }\npublic:\n    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) {\n        int n = isConnected.size();\n        vector&lt;bool&gt; isVisited(n, false);\n        int ans = 0;\n        for(int i = 0; i &lt; n; i++){\n            // \u904d\u5386\u4e00\u904d\u540e\uff0c\u5982\u679c\u7b2c\u4e8c\u904d\u8fd8\u51fa\u73b0\u4e86\u6ca1\u6709\u904d\u5386\u8fc7\u7684\u8282\u70b9\n            // \u8bf4\u660e\u51fa\u73b0\u65b0\u7684\u8fde\u901a\u5206\u91cf\n            if(!isVisited[i]){\n                // \u627e\u51fai\u5bf9\u5e94\u7684\u6240\u6709\u8fde\u901a\u8282\u70b9\uff0c\u5bf9\u5176\u6807\u8bb0\n                dfs(isConnected, isVisited, i);\n                // i\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6240\u4ee5\u51fa\u73b0\u65b0\u7684\u8fde\u901a\u5206\u91cf\n                ans++;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$\uff0c\u5176\u4e2d n \u662f\u57ce\u5e02\u7684\u6570\u91cf\u3002\u9700\u8981\u904d\u5386\u77e9\u9635 n \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\uff0c\u5176\u4e2d n \u662f\u57ce\u5e02\u7684\u6570\u91cf\u3002\u9700\u8981\u4f7f\u7528\u6570\u7ec4 visited \u8bb0\u5f55\u6bcf\u4e2a\u57ce\u5e02\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6570\u7ec4\u957f\u5ea6\u662f n\uff0c\u9012\u5f52\u8c03\u7528\u6808\u7684\u6df1\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 n</p>"},{"location":"algorithm/leetcode/#bfs_1","title":"\u89e3\u6cd5\u4e8c\uff1a bfs","text":"<p>\u4e0edfs\u7c7b\u4f3c\uff0c\u4ee5\u6bcf\u4e2a\u8282\u70b9bfs\u904d\u5386\u4e00\u904d\uff0c\u5982\u679c\u904d\u5386\u505c\u6b62\uff0c\u8bf4\u660e\u5176\u8bbf\u95ee\u5b8c\u6240\u6709\u76f8\u8fde\u7684\u8282\u70b9</p> <p>\u904d\u5386\u540e\u8fd8\u6709\u672a\u8bbf\u95ee\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6709\u65b0\u7684\u8fde\u901a\u5206\u91cf</p> <pre><code>class Solution {\npublic:\n    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) {\n        int n = isConnected.size();\n        vector&lt;bool&gt; isVisited(n, false);\n        int ans = 0;\n        for(int i = 0; i &lt; n; i++){\n            queue&lt;int&gt; q;\n            if(!isVisited[i]){\n                ans++;\n                q.push(i);\n                while(!q.empty()){\n                    int idx = q.front();\n                    q.pop();\n                    for(int j = 0; j &lt; n; j++){\n                        if(isConnected[idx][j] &amp;&amp; !isVisited[j]){\n                            q.push(j);\n                            isVisited[j] = true;\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2)$\uff0c\u5176\u4e2d n \u662f\u57ce\u5e02\u7684\u6570\u91cf\u3002\u9700\u8981\u904d\u5386\u77e9\u9635 isConnected \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\uff0c\u5176\u4e2d n \u662f\u57ce\u5e02\u7684\u6570\u91cf\u3002\u9700\u8981\u4f7f\u7528\u6570\u7ec4 visited \u8bb0\u5f55\u6bcf\u4e2a\u57ce\u5e02\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6570\u7ec4\u957f\u5ea6\u662f n\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u4f7f\u7528\u7684\u961f\u5217\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u8d85\u8fc7 n\u3002</p>"},{"location":"algorithm/leetcode/#_31","title":"\u89e3\u6cd5\u4e09\uff1a \u5e76\u67e5\u96c6","text":"<pre><code>class Solution {\npublic:\n    int Find(vector&lt;int&gt;&amp; p, int x) {\n        if (p[x] != x)\n            p[x] = Find(p, p[x]);\n        return p[x];\n    }\n    void Union(vector&lt;int&gt;&amp; p, int x, int y) { p[Find(p, x)] = Find(p, y); }\n\n    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) {\n        int n = isConnected.size();\n        int m = isConnected[0].size();\n        vector&lt;int&gt; parent(n);\n        for (int i = 0; i &lt; n; i++)\n            parent[i] = i;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; m; j++) {\n                if (isConnected[i][j])\n                    Union(parent, i, j);\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (parent[i] == i)\n                ans++;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n^2logn)$\uff0c\u5176\u4e2d n \u662f\u57ce\u5e02\u7684\u6570\u91cf\u3002\u9700\u8981\u904d\u5386\u77e9\u9635 isConnected \u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2)$\uff0c\u5982\u679c\u9047\u5230\u76f8\u8fde\u5173\u7cfb\uff0c\u5219\u9700\u8981\u8fdb\u884c 2 \u6b21\u67e5\u627e\u548c\u6700\u591a 1 \u6b21\u5408\u5e76\uff0c\u4e00\u5171\u9700\u8981\u8fdb\u884c $2n^2$\u6b21\u67e5\u627e\u548c\u6700\u591a$n^2$\u6b21\u5408\u5e76\uff0c\u56e0\u6b64\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u662f$ O(2n^2logn^2 )=O(n^2logn)$\u3002\u8fd9\u91cc\u7684\u5e76\u67e5\u96c6\u4f7f\u7528\u4e86\u8def\u5f84\u538b\u7f29\uff0c\u4f46\u662f\u6ca1\u6709\u4f7f\u7528\u6309\u79e9\u5408\u5e76\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^2logn)$\uff0c\u5e73\u5747\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4f9d\u7136\u662f $O(n2\u03b1(n))$\uff0c\u5176\u4e2d \u03b1 \u4e3a\u963f\u514b\u66fc\u51fd\u6570\u7684\u53cd\u51fd\u6570\uff0c$\u03b1(n) $\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u6570\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a$O(n)$\uff0c\u5176\u4e2d n \u662f\u57ce\u5e02\u7684\u6570\u91cf\u3002\u9700\u8981\u4f7f\u7528\u6570\u7ec4 parent \u8bb0\u5f55\u6bcf\u4e2a\u57ce\u5e02\u6240\u5c5e\u7684\u8fde\u901a\u5206\u91cf\u7684\u7956\u5148\u3002</p>"},{"location":"algorithm/leetcode/#684","title":"684 \u5197\u4f59\u8fde\u63a5","text":"<p>https://leetcode.cn/problems/redundant-connection/</p> <p>\u672c\u9898\u7ed9\u51fan\u4e2a\u70b9\u548cn\u6761\u8fb9\uff0c\u7531\u4e8e\u6811\u7684\u8fb9\u6570\u4e3a\u8282\u70b9\u6570 -1\uff0c \u6240\u4ee5\u5b9e\u9645\u4e0a\u53ea\u4f1a\u591a\u51fa\u4e00\u6761\u8fb9\uff0c\u8fd9\u6761\u8fb9\u5c31\u662f\u6211\u4eec\u8981\u6c42\u7684\u89e3</p> <p>\u5982\u679c\u591a\u6761\u7b54\u6848\u8fb9\uff0c\u521b\u4e00\u4e2aans\u6570\u7ec4\u4f9d\u6b21\u653e\u5165\uff0c\u6700\u540e\u8fd4\u56de\u672b\u5c3e\u5143\u7d20\u5373\u53ef\uff08\u5373\u6808\u9876\u5143\u7d20\uff09</p> <pre><code>class Solution {\nprivate:\n    vector&lt;int&gt; p;\n    void init(int n){\n        p.resize(n + 1);\n        for(int i = 1; i &lt;= n; i++)\n            p[i] = i;\n    }\n    int Find(int x){\n        if(p[x] != x) p[x] = Find(p[x]);\n        return p[x];\n    }\n    void Union(int x, int y){\n        p[Find(x)] = Find(y);\n    }\npublic:\n    vector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        int n = edges.size();\n        init(n);\n        for(auto edge: edges){\n            int x = edge[0], y = edge[1];\n            if(Find(x) != Find(y)){\n                Union(x, y);\n            }\n            // p[x] == p[y]\u8bf4\u660ex\u548cy\u5728\u4e00\u68f5\u6811\u4e2d\u4e86\uff0c\u6b64\u65f6\u591a\u52a0\u7684\u90a3\u6761\u8fb9\u4f1a\u4f7f\u6811\u53d8\u6210\u56fe\uff0c\u5373\u9898\u89e3\n            else return edge;\n        }\n        return vector&lt;int&gt;();\n    }\n};\n</code></pre>"},{"location":"algorithm/leetcode/#739","title":"739 \u6bcf\u65e5\u6e29\u5ea6","text":"<p>https://leetcode.cn/problems/daily-temperatures/description/</p> <p>\u627e\u51fa\u5de6/\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u6808\u9876\u5143\u7d20\u5c0f -&gt;  \u5355\u8c03\u9012\u589e\u6808</p> <p>\u627e\u51fa\u5de6/\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6bd4\u6808\u9876\u5143\u7d20\u5927 -&gt; \u5355\u8c03\u9012\u51cf\u6808</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; dailyTemperatures(vector&lt;int&gt;&amp; temperatures) {\n        int n = temperatures.size();\n        stack&lt;int&gt; stk;\n        vector&lt;int&gt; ans(n, 0);\n        for(int i = 0; i &lt; n; i++){\n            // \u5355\u8c03\u9012\u51cf\u6808\uff0c\u5f39\u51fa\u8bf4\u660e\u65b0\u5143\u7d20i\u662f\u7b2c\u4e00\u4e2a\u6bd4\u6808\u9876\u5143\u7d20\u5927\u7684\u5143\u7d20\n            while(!stk.empty() &amp;&amp; temperatures[i] &gt; temperatures[stk.top()]){\n                // \u9898\u76ee\u95ee\u7684\u662f\u51e0\u5929\u540e\n                ans[stk.top()] = i - stk.top();\n                stk.pop();\n            }\n            stk.push(i);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6e29\u5ea6\u5217\u8868\u7684\u957f\u5ea6\u3002\u6b63\u5411\u904d\u5386\u6e29\u5ea6\u5217\u8868\u4e00\u904d\uff0c\u5bf9\u4e8e\u6e29\u5ea6\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u4e0b\u6807\uff0c\u6700\u591a\u6709\u4e00\u6b21\u8fdb\u6808\u548c\u51fa\u6808\u7684\u64cd\u4f5c\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u6e29\u5ea6\u5217\u8868\u7684\u957f\u5ea6\u3002\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u6808\u5b58\u50a8\u6e29\u5ea6\u5217\u8868\u4e2d\u7684\u4e0b\u6807\u3002</p>"},{"location":"algorithm/leetcode/#763","title":"763 \u5212\u5206\u5b57\u6bcd\u533a\u95f4","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; partitionLabels(string s) {\n        int n = s.size();\n        int last[26];\n        vector&lt;int&gt; res;\n        // \u7edf\u8ba1\u6bcf\u4e2a\u5b57\u7b26\u6700\u540e\u51fa\u73b0\u7684\u4e0b\u6807\n        for(int i = 0; i &lt; n; i++){\n            last[s[i] - 'a'] = i;\n        }\n        // start\u4e3a\u533a\u95f4\u5f00\u59cb\u70b9\uff0cend\u4e3a\u533a\u95f4\u7ed3\u675f\u70b9\n        // end\u4e00\u5b9a\u4e3a\u67d0\u533a\u95f4\u5185\u6240\u6709last[j]\u7684\u6700\u5927\u503c\n        int start = 0, end = 0;\n        for(int i = 0; i &lt; n; i++){\n            end = max(end, last[s[i] - 'a']);\n            // i == end \u8bf4\u660e\u533a\u95f4\u7ec8\u70b9end\u5df2\u786e\u5b9a \u4e14\u5df2\u904d\u5386\u5230\u533a\u95f4\u7ec8\u70b9end\n            if(i == end){\n                res.push_back(end - start + 1);\n                start = end + 1;\n            }\n        }\n        return res;\n    }\n};\n</code></pre> <p>\u590d\u6742\u5ea6\u5206\u6790</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\uff0c\u5176\u4e2d n \u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u9700\u8981\u904d\u5386\u5b57\u7b26\u4e32\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u904d\u5386\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u6bcd\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4e0b\u6807\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u65f6\u8fdb\u884c\u5b57\u7b26\u4e32\u7684\u5212\u5206\u3002</p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(\u2223\u03a3\u2223)\uff0c\u5176\u4e2d \u03a3 \u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u96c6\u3002\u8fd9\u9053\u9898\u4e2d\uff0c\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\uff0c\u56e0\u6b64 \u2223\u03a3\u2223=26\u3002</p>"},{"location":"algorithm/leetcode/#_32","title":"\u5237\u9898\u603b\u7ed3","text":""},{"location":"algorithm/leetcode/#_33","title":"\u6ed1\u52a8\u7a97\u53e3","text":"<p>\u5355\u5411\u961f\u5217queue\uff0c<code>#include &lt;queue&gt;</code> , \u4ec5\u652f\u6301\u63d2\u5165\u961f\u5c3epush(int i)\uff0c\u5f39\u51fa\u961f\u5934pop()</p> <p>\u53cc\u5411\u961f\u5217duque\uff0c<code>#include&lt;deque&gt;</code>, \u652f\u6301\u63d2\u5165\u961f\u5934push_front(int i)\uff0c\u63d2\u5165\u961f\u5c3epush_back(int i)\uff0c\u5220\u9664\u961f\u5934pop_front()\uff0c\u5220\u9664\u961f\u5c3epop_back()</p> <p>\u5bf9\u4e8e\u4e00\u822c\u7684\u6ed1\u52a8\u7a97\u53e3\uff0c\u5982\u679c\u4e0d\u7528pop\u961f\u5c3e\uff0c\u53ef\u4ee5\u7528queue</p> <pre><code>        queue&lt;int&gt; q;\n        // \u904d\u5386\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\n        for(int i = 0; i &lt; n; i++){\n        // \u68c0\u67e5\u65b0\u52a0\u5165\u7684\u5143\u7d20\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u6ee1\u8db3\uff0c\u52a0\u5165\u961f\u5c3e\n        if(check(q.front(), i))\n                q.push(i);\n        // \u6839\u636e\u95ee\u9898\uff0c\u5bf9\u63d2\u5165\u7684nums[i]\u64cd\u4f5c\n        ...\n        // check(q.front())\u610f\u4e3a\uff1a\u68c0\u67e5\u961f\u5934\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5219\u5f39\u51fa\n                while(!q.empty() &amp;&amp; check(q.front())){\n                        q.pop();\n                }\n        }\n</code></pre> <p>\u5982\u679c\u9700\u8981\u6c42\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528deque</p> <pre><code>        deque&lt;int&gt; q;\n        // \u904d\u5386\u5e8f\u5217\u6bcf\u4e2a\u5143\u7d20\n        for(int i = 0; i &lt; n; i++){\n        // \u68c0\u67e5\u961f\u5934\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5f39\u51fa\u961f\u5934    \n        while(!q.empty() &amp;&amp; check(q.front()))   q.pop_front();\n        // \u68c0\u67e5\u961f\u5c3e\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u5f39\u51fa\u961f\u5c3e\n        while(!q.empty() &amp;&amp; check(q.back(), i)) q.pop_back(i);\n        // \u5c06\u65b0\u5143\u7d20\u52a0\u5165\u961f\u5c3e\n        q.push_back(i);\n        }\n</code></pre> <p>\u4f8b\u5982acwing 154 \u6ed1\u52a8\u7a97\u53e3</p> <p>https://www.acwing.com/problem/content/156/</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;deque&gt;\nusing namespace std;\n\nconst int N = 1e6 + 10;\nint a[N];\nint n, k;\n\nint main(){\n    deque&lt;int&gt; q;\n    cin &gt;&gt; n &gt;&gt; k;\n    for(int i = 0; i &lt; n; i++)\n        cin &gt;&gt; a[i];\n    // \u6c42\u6ed1\u52a8\u7a97\u53e3\u6700\u5c0f\u503c\n    for(int i = 0; i &lt; n; i++){\n        // \u961f\u5217\u5b58\u50a8\u7684\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5c0f\u503c\u7684\u7d22\u5f15\n        // \u961f\u5217\u7684\u957f\u5ea6\u4e0d\u4e00\u5b9a\u4e3ak\n\n        // \u7a97\u53e3\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u4e3aidx\uff0c\u957f\u5ea6\u4e3ak\u7684\u7a97\u53e3\u5bf9\u5e94\u7684\u672b\u5c3e\u5143\u7d20\u7684\u7d22\u5f15\u4e3aidx + k - 1\uff0c\u4e5f\u4e3ai\n        // \u6240\u4ee5i = idx + k - 1 \u6216idx = i - k + 1\n        // \u53ef\u63a8\u51fa\uff1a\n        // \uff081\uff09i = idx + k - 1:\n        //      \u6240\u4ee5\u4e00\u5f00\u59cbidx = 0\uff0c\u7a97\u53e3\u672a\u6ee1\uff0c\u5f80\u91cc\u9762\u586b\u5143\u7d20\uff0c\u5f53i == k - 1\u65f6\uff0c\u7a97\u53e3\u521a\u597d\u6ee1\uff1b\u4e4b\u540ei &gt; k - 1\n        // \uff082\uff09idx = i + k - 1:\n        //      \u60f3\u8981\u4fdd\u6301\u7a97\u53e3\u4e00\u76f4\u4e3ak\uff0c\u90a3\u4e48\u9700\u8981idx = i - k + 1 &lt;= q.front()\n        //      \u5982\u679ci - k + 1 &gt; q.front() \u8bf4\u660e\u961f\u5934\u5df2\u7ecf\u4e0d\u5728\u7a97\u53e3\u5185\uff0c\u9700\u8981\u5f39\u51fa\n\n\n        // pop\u524d\u4fdd\u8bc1\u961f\u5217\u4e0d\u4e3a\u7a7a \u4e14 \u4fdd\u8bc1\u7a97\u53e3\u59cb\u7ec8\u4fdd\u6301\u5728k\u4e2a\n        // \u5982\u679c\u8d85\u51fak\u4e2a\uff0c\u8bf4\u660e\u961f\u5934\u9700\u8981\u5f39\u51fa\n        // \u5982\u679c\u4e0d\u8db3\u6216\u7b49\u4e8ek\u4e2a\uff0c\u961f\u5934\u4e5f\u4e0d\u9700\u8981\u5f39\u51fa\n        while(!q.empty() &amp;&amp; i - k + 1 &gt; q.front()) q.pop_front();\n        // pop\u524d\u4fdd\u8bc1\u961f\u5217\u4e0d\u4e3a\u7a7a \u4e14 \u5982\u679c\u961f\u5c3e\u5143\u7d20a[q.back()]\u6bd4\u65b0\u5143\u7d20a[i]\u8fd8\u5c0f\n        // \u90a3\u4e48\u53ea\u8981a[i]\u8fd8\u5728\u7a97\u53e3\u5185\uff0c\u4e4b\u540e\u7a97\u53e3\u7684\u6700\u5c0f\u503c\u4e00\u5b9a\u4e0d\u4e3aa[q.back()]\n        // \u56e0\u6b64\u5f39\u51fa\u961f\u5c3e\u5143\u7d20\n        while(!q.empty() &amp;&amp; a[i] &lt; a[q.back()]) q.pop_back();\n        q.push_back(i);\n\n        if(i - k + 1 &gt;= 0)\n            cout &lt;&lt; a[q.front()] &lt;&lt; \" \";\n    }\n    q.clear();\n    cout &lt;&lt; endl;\n    // \u6c42\u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c\n    for(int i = 0; i &lt; n; i++){\n        while(!q.empty() &amp;&amp; i - q.front() + 1 &gt; k) q.pop_front();\n        while(!q.empty() &amp;&amp; a[i] &gt; a[q.back()]) q.pop_back();\n        q.push_back(i);\n        if(i - k + 1 &gt;= 0)\n            cout &lt;&lt; a[q.front()] &lt;&lt; \" \";\n    }\n}\n</code></pre> <p>\u5f53\u7136\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u53ea\u9700\u8981\u6307\u5411\u539f\u6765\u7684\u6570\u7ec4\u5373\u53ef</p>"},{"location":"algorithm/leetcode/#_34","title":"\u56fe\uff1a\u7f51\u683c\u95ee\u9898","text":"<p>\u7f51\u683c\u95ee\u9898</p>"},{"location":"algorithm/leetcode/#_35","title":"\u5e76\u67e5\u96c6","text":"<p>\u53ef\u89e3\u51b3\u56fe\u7684\u8fde\u901a\u5206\u91cf\u95ee\u9898</p>"},{"location":"algorithm/leetcode/#_36","title":"\u5355\u8c03\u6808","text":""},{"location":"algorithm/leetcode/#stl","title":"STL","text":""},{"location":"algorithm/leetcode/#_37","title":"\u4e8c\u5206\u67e5\u627e","text":"<p>https://blog.csdn.net/weixin_45031801/article/details/137544229</p> <p>lower_bound( begin , end , val , less() ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u52a0\u5165\u4e86 less() \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a\u9002\u7528\u4e8e\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u4ece\u6570\u7ec4/\u5bb9\u5668\u7684 beign \u4f4d\u7f6e\u8d77\uff0c\u5230 end-1 \u4f4d\u7f6e\u7ed3\u675f\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a \u5927\u4e8e\u7b49\u4e8e val \u7684\u6570\u5b57 lower_bound( begin , end , val , greater() ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\u52a0\u5165\u4e86 greater() \u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\uff1a\u9002\u7528\u4e8e\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684\u6709\u5e8f\u5e8f\u5217\uff0c\u4ece\u6570\u7ec4/\u5bb9\u5668\u7684 beign \u4f4d\u7f6e\u8d77\uff0c\u5230 end-1 \u4f4d\u7f6e\u7ed3\u675f\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a \u5c0f\u4e8e\u7b49\u4e8e val \u7684\u6570\u5b57"},{"location":"algorithm/leetcode/#upper_bound","title":"upper_bound","text":"<p>\u524d\u63d0\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0cupper_bound\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8eval\u503c\u7684\u4f4d\u7f6e\u3002\uff08\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\uff09</p>"},{"location":"algorithm/leetcode/#lower_bound","title":"lower_bound","text":"<p>\u524d\u63d0\u662f\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0clower_bound \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u503c\u4e0d\u5c0f\u4e8e val \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8eval\u503c\u7684\u4f4d\u7f6e\u3002\uff08\u901a\u8fc7\u4e8c\u5206\u67e5\u627e\uff09</p> <p>*\u6ce8\u610f\uff1a*\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u4f8b\u5b50\u4e2d\uff08val &gt;= 8\uff09,\u90a3\u4e48\u8fed\u4ee3\u5668\u5c31\u4f1a\u6307\u5411last\u4f4d\u7f6e\uff0c*\u4e5f\u5c31\u662f\u6570\u7ec4\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\uff0c\u4e0d\u7ba1val\u591a\u5927\uff0c\u8fed\u4ee3\u5668\u6c38\u8fdc\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e*</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main()\n{\n    vector&lt;int&gt; v = { 3,4,1,2,8 };\n    // \u5148\u6392\u5e8f\n    sort(v.begin(), v.end());  // 1 2 3 4 8\n\n    // \u5b9a\u4e49\u4e24\u4e2a\u8fed\u4ee3\u5668\u53d8\u91cf\n    vector&lt;int&gt;::iterator iter1;\n    vector&lt;int&gt;::iterator iter2;\n\n    // \u5728\u52a8\u6001\u6570\u7ec4\u4e2d\u5bfb\u627e &gt;=3 \u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u6570 \u5e76\u4ee5\u8fed\u4ee3\u5668\u7684\u5f62\u5f0f\u8fd4\u56de\n    iter1 = lower_bound(v.begin(), v.end(), 3);  // -- \u6307\u54113\n    // \u5728\u52a8\u6001\u6570\u7ec4\u4e2d\u5bfb\u627e &gt;=7 \u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u6570 \u5e76\u4ee5\u8fed\u4ee3\u5668\u7684\u5f62\u5f0f\u8fd4\u56de\n    iter2 = lower_bound(v.begin(), v.end(), 7);  // -- \u6307\u54118\n\n    cout &lt;&lt; distance(v.begin(), iter1) &lt;&lt; endl; //\u4e0b\u6807 2\n    cout &lt;&lt; distance(v.begin(), iter2) &lt;&lt; endl; //\u4e0b\u6807 4 \n    return 0;\n}\n\n</code></pre>"},{"location":"software_development/backend/Linux/","title":"Linux","text":""},{"location":"software_development/backend/Linux/#_1","title":"\u5e38\u7528\u547d\u4ee4","text":""},{"location":"software_development/backend/Linux/#netstat","title":"netstat","text":"<p>\u67e5\u770b\u6574\u4e2aLinux\u7cfb\u7edf\u7684\u7f51\u7edc\u60c5\u51b5</p> <pre><code>-a   \u6216\u2013all                             \u663e\u793a\u6240\u6709\u8fde\u7ebf\u4e2d\u7684Socket\u3002\n-A                                       &lt;\u7f51\u7edc\u7c7b\u578b&gt;\u6216\u2013&lt;\u7f51\u7edc\u7c7b\u578b&gt; \u5217\u51fa\u8be5\u7f51\u7edc\u7c7b\u578b\u8fde\u7ebf\u4e2d\u7684\u76f8\u5173\u5730\u5740\u3002\n-c   \u6216\u2013continuous               \u6301\u7eed\u5217\u51fa\u7f51\u7edc\u72b6\u6001\u3002\n-C \u6216\u2013cache                       \u663e\u793a\u8def\u7531\u5668\u914d\u7f6e\u7684\u5feb\u53d6\u4fe1\u606f\u3002\n-e  \u6216\u2013extend                     \u663e\u793a\u7f51\u7edc\u5176\u4ed6\u76f8\u5173\u4fe1\u606f\u3002\n-F  \u6216 \u2013fib                          \u663e\u793aFIB\u3002\n-g  \u6216\u2013groups                     \u663e\u793a\u591a\u91cd\u5e7f\u64ad\u529f\u80fd\u7fa4\u7ec4\u7ec4\u5458\u540d\u5355\u3002\n-h  \u6216\u2013help                        \u5728\u7ebf\u5e2e\u52a9\u3002\n-i   \u6216\u2013interfaces                 \u663e\u793a\u7f51\u7edc\u754c\u9762\u4fe1\u606f\u8868\u5355\u3002\n-l  \u6216\u2013listening                    \u663e\u793a\u76d1\u63a7\u4e2d\u7684\u670d\u52a1\u5668\u7684Socket\u3002\n-M   \u6216\u2013masquerade           \u663e\u793a\u4f2a\u88c5\u7684\u7f51\u7edc\u8fde\u7ebf\u3002\n-n  \u6216\u2013numeric                   \u76f4\u63a5\u4f7f\u7528IP\u5730\u5740\uff0c\u800c\u4e0d\u901a\u8fc7\u57df\u540d\u670d\u52a1\u5668\u3002\n-N   \u6216\u2013netlink\u6216\u2013symbolic  \u663e\u793a\u7f51\u7edc\u786c\u4ef6\u5916\u56f4\u8bbe\u5907\u7684\u7b26\u53f7\u8fde\u63a5\u540d\u79f0\u3002\n-o  \u6216\u2013timers                      \u663e\u793a\u8ba1\u65f6\u5668\u3002\n-p   \u6216\u2013programs                \u663e\u793a\u6b63\u5728\u4f7f\u7528Socket\u7684\u7a0b\u5e8f\u8bc6\u522b\u7801\u548c\u7a0b\u5e8f\u540d\u79f0\u3002\n-r  \u6216\u2013route                        \u663e\u793a Routing Table\u3002\n-s  \u6216\u2013statistice \u663e\u793a\u7f51\u7edc\u5de5\u4f5c\u4fe1\u606f\u7edf\u8ba1\u8868\u3002\n-t  \u6216\u2013tcp \u663e\u793aTCP \u4f20\u8f93\u534f\u8bae\u7684\u8fde\u7ebf\u72b6\u51b5\u3002\n-u\u6216\u2013udp \u663e\u793aUDP\u4f20\u8f93\u534f\u8bae\u7684\u8fde\u7ebf\u72b6\u51b5\u3002\n-v\u6216\u2013verbose \u663e\u793a\u6307\u4ee4\u6267\u884c\u8fc7\u7a0b\u3002\n-V \u6216\u2013version \u663e\u793a\u7248\u672c\u4fe1\u606f\u3002\n-w\u6216\u2013raw \u663e\u793aRAW\u4f20\u8f93\u534f\u8bae\u7684\u8fde\u7ebf\u72b6\u51b5\u3002\n-x\u6216\u2013unix \u6b64\u53c2\u6570\u7684\u6548\u679c\u548c\u6307\u5b9a\u201d-A unix\u201d\u53c2\u6570\u76f8\u540c\u3002\n\u2013ip\u6216\u2013inet \u6b64\u53c2\u6570\u7684\u6548\u679c\u548c\u6307\u5b9a\u201d-A inet\u201d\u53c2\u6570\u76f8\u540c\u3002\n</code></pre> <p>\u5e38\u7528\u547d\u4ee4\u5982\u4e0b\uff1a</p> <pre><code>netstat -ntlp //\u67e5\u770b\u5f53\u524d\u6240\u6709tcp\u7aef\u53e3\u4f7f\u7528\u60c5\u51b5 \n\nnetstat -ntulp | grep 80 //\u67e5\u770b\u6240\u670980\u7aef\u53e3\u7684\u4f7f\u7528\u60c5\u51b5    \n\nnetstat -an | grep 3306   //\u67e5\u770b\u6240\u67093306\u7aef\u53e3\u4f7f\u7528\u60c5\u51b5\n\nnetstat -nlp | grep LISTEN   //\u67e5\u770b\u5f53\u524d\u6240\u6709\u76d1\u542c\u7aef\u53e3\n</code></pre> <p>\u89e3\u91ca\u4e00\u4e0b\u72b6\u6001\uff08state\uff09\u4e86</p> <ul> <li>LISTEN\uff1a(Listening for a connection.)\u4fa6\u542c\u6765\u81ea\u8fdc\u65b9\u7684TCP\u7aef\u53e3\u7684\u8fde\u63a5\u8bf7\u6c42</li> <li>SYN-SENT\uff1a(Active; sent SYN. Waiting for a matching connection request after having sent a connection request.)\u518d\u53d1\u9001\u8fde\u63a5\u8bf7\u6c42\u540e\u7b49\u5f85\u5339\u914d\u7684\u8fde\u63a5\u8bf7\u6c42</li> <li>SYN-RECEIVED\uff1a(Sent and received SYN. Waiting for a confirming connection request acknowledgment after having both received and sent connection requests.)\u518d\u6536\u5230\u548c\u53d1\u9001\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u540e\u7b49\u5f85\u5bf9\u65b9\u5bf9\u8fde\u63a5\u8bf7\u6c42\u7684\u786e\u8ba4</li> <li>ESTABLISHED\uff1a(Connection established.)\u4ee3\u8868\u4e00\u4e2a\u6253\u5f00\u7684\u8fde\u63a5</li> <li>FIN-WAIT-1\uff1a(Closed; sent FIN.)\u7b49\u5f85\u8fdc\u7a0bTCP\u8fde\u63a5\u4e2d\u65ad\u8bf7\u6c42\uff0c\u6216\u5148\u524d\u7684\u8fde\u63a5\u4e2d\u65ad\u8bf7\u6c42\u7684\u786e\u8ba4</li> <li>FIN-WAIT-2\uff1a(Closed; FIN is acknowledged; awaiting FIN.)\u4ece\u8fdc\u7a0bTCP\u7b49\u5f85\u8fde\u63a5\u4e2d\u65ad\u8bf7\u6c42</li> <li>CLOSE-WAIT\uff1a(Received FIN; waiting to receive CLOSE.)\u7b49\u5f85\u4ece\u672c\u5730\u7528\u6237\u53d1\u6765\u7684\u8fde\u63a5\u4e2d\u65ad\u8bf7\u6c42</li> <li>CLOSING\uff1a(Closed; exchanged FIN; waiting for FIN.)\u7b49\u5f85\u8fdc\u7a0bTCP\u5bf9\u8fde\u63a5\u4e2d\u65ad\u7684\u786e\u8ba4</li> <li>LAST-ACK\uff1a(Received FIN and CLOSE; waiting for FIN ACK.)\u7b49\u5f85\u539f\u6765\u7684\u53d1\u5411\u8fdc\u7a0bTCP\u7684\u8fde\u63a5\u4e2d\u65ad\u8bf7\u6c42\u7684\u786e\u8ba4</li> <li>TIME-WAIT\uff1a(In 2 MSL (twice the maximum segment length) quiet wait after close. )\u7b49\u5f85\u8db3\u591f\u7684\u65f6\u95f4\u4ee5\u786e\u4fdd\u8fdc\u7a0bTCP\u63a5\u6536\u5230\u8fde\u63a5\u4e2d\u65ad\u8bf7\u6c42\u7684\u786e\u8ba4</li> <li>CLOSED\uff1a(Connection is closed.)\u6ca1\u6709\u4efb\u4f55\u8fde\u63a5\u72b6\u6001</li> </ul> <p>route </p> <p>arp</p> <p>top</p> <p>\u4e0b\u9762\u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u5b9a\u4f4d\u50f5\u5c38\u8fdb\u7a0b\u4ee5\u53ca\u8be5\u50f5\u5c38\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\uff1a</p> <pre><code>ps -A -ostat,ppid,pid,cmd |grep -e '^[Zz]'\n</code></pre>"},{"location":"software_development/backend/computer_basic/","title":"\u516b\u80a1","text":""},{"location":"software_development/backend/computer_basic/#_2","title":"\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"software_development/backend/computer_basic/#coding","title":"\u5c0f\u6797coding","text":"<p>https://xiaolincoding.com</p>"},{"location":"software_development/backend/computer_basic/#javaguide","title":"javaguide","text":"<p>\u57fa\u7840\u7248</p> <p>https://javaguide.cn</p> <p>\u77e5\u8bc6\u661f\u7403</p> <p>https://wx.zsxq.com/group/48418884588288/topic/118811814512212</p>"},{"location":"software_development/backend/computer_basic/#c","title":"C++","text":"<p>https://www.nowcoder.com/discuss/454697528508870656</p>"},{"location":"software_development/backend/interview_experiences/","title":"\u9762\u7ecf","text":""},{"location":"software_development/backend/interview_experiences/#_2","title":"\u817e\u8baf\u4f1a\u8bae\u6691\u671f\u5b9e\u4e60","text":"<p>GET\u548cPOST\u7684\u533a\u522b\uff1f</p> <p>TCP\u4e09\u6b21\u63e1\u624b\u8fc7\u7a0b\uff1f</p> <p>\u8fdb\u7a0b\u95f4\u901a\u4fe1\u65b9\u5f0f\uff1f</p> <p>\u8c03\u5ea6\u7b97\u6cd5\u6709\u54ea\u51e0\u79cd\uff1f</p> <p>\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u533a\u522b\uff1f</p> <p>\u5e38\u7528\u7684Linux\u547d\u4ee4\uff1f</p> <p>MySQL\u9694\u79bb\u7ea7\u522b\u6709\u54ea\u4e9b\uff1f\u4e3e\u4e2a\u4f8b\u5b50\u8bf4\u660e</p> <p>ES\u5012\u6392\u7d22\u5f15\uff1f\u770b\u8fc7\u6e90\u7801\u5417\uff1f</p> <p>\u4f60\u9879\u76ee\u8bf4\u7684\u90a3\u4e2aOrderDict\uff08\u6211\u9879\u76ee\u4e2d\u4f7f\u7528\u4e86LRU\u7b97\u6cd5\uff0c\u901a\u8fc7Python\u7684OrderDict\u5b9e\u73b0\uff09\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f</p> <p>python\u5b9e\u73b0LRU\u7b97\u6cd5_lru python-CSDN\u535a\u5ba2</p> <p>\u5fae\u4fe1\u626b\u7801\u767b\u5f55\u7684\u8fc7\u7a0b\uff1f</p> <p>\u7a0b\u5e8f\u90e8\u7f72\u5230Linux\u4e2d\uff0c\u53d1\u751f\u4e86CPU\u5360\u7528\u5f88\u9ad8\u7684\u60c5\u51b5\uff0c\u5982\u4f55\u6392\u67e5\uff1f</p> <p>https://blog.csdn.net/yingchao_yuan/article/details/109199868#:~:text=\u8fd9\u4e2a\u975e\u5e38\u7b80\u5355\uff0c\u4e00\u6761\u547d\u4ee4\u641e\u5b9a\uff0ctop,-p%20\u8fdb\u7a0bpid\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\uff1a\u8fd9\u6837\u5c31\u53ef\u4ee5\u6301\u7eed\u7684\u89c2\u5bdf\u4f60\u7684\u7a0b\u5e8f\u7684cpu\u5360\u7528\u60c5\u51b5\uff0c\u5982\u679c\u4e00\u76f4\u5c45\u9ad8\u4e0d\u4e0b\uff0c\u5c31\u53ef\u80fd\u662f\u6709\u95ee\u9898\u4e86%E3%80%82</p>"},{"location":"software_development/backend/interview_experiences/#ai","title":"\u7f8e\u56e2AI\u9762","text":"<p>cookie\u548csession\u7684\u533a\u522b\uff1f</p> <p>\u5982\u4f55\u67e5\u770b\u7cfb\u7edf\u8fdb\u7a0b\uff1f\u5982\u4f55\u7ed3\u675f\u8be5\u8fdb\u7a0b\uff1f</p> <p>\u6570\u636e\u5e93\u5206\u533a\u8868\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f</p> <p>C++\u7684\u5f15\u7528\u662f\u4ec0\u4e48\uff1f\u5f15\u7528\u548c\u6307\u9488\u7684\u533a\u522b\uff1f</p> <p>\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u5728\u7ebf\u6e38\u620f\u6392\u884c\u699c\u529f\u80fd\uff0c\u5e94\u8be5\u4f7f\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u548c\u66f4\u65b0\u673a\u5236\uff1f</p> <p>\u4f60\u662f\u5982\u4f55\u5173\u6ce8\u8f6f\u4ef6\u5f00\u53d1\u9886\u57df\u7684\u524d\u6cbf\u8fdb\u5c55\uff1f</p> <p>\u8bf7\u4ecb\u7ecd\u4e00\u4e0b\u4f60\u66fe\u53d1\u73b0\u8fc7\u7684\u4e00\u4e2a\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u4f60\u662f\u5982\u4f55\u9884\u89c1\u5e76\u89e3\u51b3\u5b83\u7684\uff1f</p> <ul> <li>\u6211\uff1a\u63d0\u5230\u4e86\u67d0\u9879\u76ee\u7684api\u4e0d\u7a33\u5b9a\uff0c\u6211\u4eec\u901a\u8fc7\u6d4b\u8bd5\u53d1\u73b0\u4e86</li> <li>AI\uff1a\u4f60\u662f\u5982\u4f55\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u8fd9\u4e2aapi\u7684\u7a33\u5b9a\u6027\uff0c\u4f7f\u7528\u4e86\u4ec0\u4e48\u65b9\u6cd5\u548c\u5de5\u5177\uff1f</li> </ul>"},{"location":"software_development/backend/interview_experiences/#tme","title":"TME\u4e00\u9762","text":"<p>\u8c08\u5b9e\u4e60\u7ecf\u5386</p> <ul> <li>\u9762\u8bd5\u5b98\u8bc4\u4ef7\u5de5\u7a0b\u91cf\u4e0d\u5927</li> </ul> <p>\u5171\u4eab\u5c4f\u5e55\u672c\u5730ide\u5199\u7b97\u6cd5\u9898\uff0c\u81ea\u5df1\u8f93\u5165\u6d4b\u8bd5\u7528\u4f8b</p> <ul> <li>\u4e8c\u5206\u67e5\u627e</li> <li>\u5b57\u7b26\u4e32\u5168\u6392\u5217</li> </ul> <p>\u8bf4\u4e00\u4e0bmalloc\u548cnew\u7684\u533a\u522b</p> <p>\u8bf4\u4e00\u4e0b\u534f\u7a0b</p> <p>\u8bf4\u4e00\u4e0bmvcc\u7684\u5e95\u5c42\u5b9e\u73b0\u539f\u7406</p> <ul> <li>\u6211\u7b54\u4e86readView\u548cundo log\uff0c\u4f46\u662f\u9762\u8bd5\u5b98\u8981\u6c42\u66f4\u6df1\u5165\u66f4\u8be6\u7ec6\u4e00\u70b9</li> </ul> <p>\u4f60\u662f\u5982\u4f55\u5b66\u4e60C++\u7684</p> <p>\u770b\u4e86\u4ec0\u4e48C++\u7684\u4e66</p> <p>\u4f60\u6709\u505a\u8fc7\u504f\u5e95\u5c42\u7684\u540e\u7aef\u9879\u76ee\u5417</p> <p>\u770b\u4e86\u4ec0\u4e48\u6570\u636e\u5e93\u7684\u4e66</p> <p>\u7b97\u6cd5\u9898\u6ca1\u6709\u5168\u90e8ac\uff0c\u516b\u80a1\u6ca1\u600e\u4e48\u7b54\u51fa\u6765\uff0c\u611f\u89c9\u6302</p>"},{"location":"software_development/backend/project_review/","title":"Backend notice","text":"<p>\u672c\u6587\u6863\u4ecb\u7ecd\u540e\u7aef\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6cd5/\u7ecf\u9a8c</p>"},{"location":"software_development/backend/project_review/#topic-1","title":"Topic 1: \u52a0\u6c34\u5370","text":""},{"location":"software_development/backend/project_review/#problem-1","title":"Problem 1: \u52a0\u6c34\u5370\u5927\u5c0f\u81ea\u9002\u5e94\u95ee\u9898","text":"<p>\u5b9e\u73b0\u52a0\u6c34\u5370\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u7528\u6237\u7684\u6587\u4ef6\u9875\u9762\u5927\u5c0f\u4e0d\u4e00\uff08\u6bd4\u5982\u5728\u540c\u4e00\u4e2apdf\u4e2d\uff0c\u5b58\u5728\u9875\u9762\u975e\u5e38\u5927\u7684\u5c01\u9762\u9875\u548c\u9875\u9762\u6b63\u5e38\u7684\u5185\u5bb9\u4e5f\uff09\uff0c\u4e0d\u80fd\u4ec5\u4ec5\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u6c34\u5370\u9875\u9762\u9002\u7528\u4e8e\u6240\u6709\u9875\u9762\uff0c\u5426\u5219\u4f1a\u9020\u6210\u6c34\u5370\u4f4d\u7f6e\u504f\u79fb\u7b49\u6c34\u5370\u6548\u679c\u4e0d\u597d\u7684\u60c5\u51b5</p> <p>\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e86\u591a\u4e2a\u529e\u6cd5</p>"},{"location":"software_development/backend/project_review/#solution-1pdf","title":"Solution 1\uff1a\u5355\u7ebf\u7a0b\u521b\u5efa\u81ea\u9002\u5e94pdf","text":"<p>\u76f8\u5173\u4ee3\u7801\u5728<code>create_watermark_adapted_singleThread</code>\u548c<code>add_watermark_file_singleThread</code></p> <p>\u6211\u4eec\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u591a\u9875\u7684\u6c34\u5370pdf\uff0c\u8be5pdf\u6bcf\u4e00\u9875\u7684\u5927\u5c0f\u4e0e\u5bf9\u5e94\u8f93\u5165pdf\u7684\u6bcf\u4e00\u9875\u5927\u5c0f\u76f8\u540c\uff0c\u4ece\u800c\u5b9e\u73b0\u81ea\u9002\u5e94</p> <p>\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a</p> <p>\u601d\u8def\u4e3a\uff1a\u5c06\u591a\u4e2a\u6c34\u5370\u9875\u9762\u5408\u5e76\u5728\u4e00\u4e2apdf\u5185</p> <pre><code>    for i in range(pageNum):\n        page = pdf_input.getPage(i)\n        page_width = float(page.mediaBox.getWidth())\n        page_height = float(page.mediaBox.getHeight())\n        pageSize=(page_width,page_height)\n        pdf_watermark_data=create_watermark(content,pageSize)\n        pdf_watermark_singleFile = PdfFileReader(BytesIO(pdf_watermark_data), strict=False)\n        pdf_watermark_singleFilePage = pdf_watermark_singleFile.getPage(0)\n        pdf_watermark_singleFilePage.compressContentStreams()\n        pdf_watermark_file.addPage(pdf_watermark_singleFilePage)\n</code></pre>"},{"location":"software_development/backend/project_review/#problem-2","title":"Problem 2\uff1a\u52a0\u6c34\u5370\u8fc7\u6162","text":"<p>\u89e3\u6cd51\u80fd\u89e3\u51b3\u81ea\u9002\u5e94\u6c34\u5370\u9875\u9762\u95ee\u9898\uff0c\u4f46\u4f1a\u9020\u6210\u52a0\u6c34\u5370\u901f\u5ea6\u8fc7\u6162\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u901a\u8fc7\u591a\u7ebf\u7a0b\u52a0\u901f</p>"},{"location":"software_development/backend/project_review/#solution-2pdf","title":"Solution 2\uff1a\u591a\u7ebf\u7a0b\u521b\u5efa\u81ea\u9002\u5e94pdf","text":"<p>\u76f8\u5173\u4ee3\u7801\u5728<code>create_watermark_adapted_multiThread</code>\u548c<code>add_watermark_file_multiThread</code></p> <p>\u6211\u4eec\u901a\u8fc7\u521b\u5efa\u7ebf\u7a0b\u6c60\uff0c\u5bf9\u521b\u5efa\u6c34\u5370\u7684\u884c\u4e3a\u8fdb\u884c\u5e76\u884c\u64cd\u4f5c</p> <pre><code>page_results=pool.map(create_watermark_adapted_multiThread,content_list,page_list)  \n</code></pre> <p>\u9057\u61be\u7684\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u7ebf\u7a0b\u6c60\u5e76\u4e0d\u4f1a\u663e\u8457\u52a0\u901f\u52a0\u6c34\u5370\uff08\u4ec5\u4ec5\u52a0\u901f\u4e863s\uff0c\u5bf9\u4e8e60s\u7684\u603b\u65f6\u95f4\u6765\u8bf4\u663e\u7136\u4e0d\u591f\uff09</p> <p>\u901a\u8fc7\u6d4b\u901f\uff0c\u6211\u4eec\u53d1\u73b0\u65f6\u95f4\u4e3b\u8981\u6d88\u8017\uff1a\u5c06\u6c34\u5370\u6587\u4ef6\u548c\u8f93\u5165\u6587\u4ef6\u5408\u5e76\u7684\u64cd\u4f5c\u4e2d\u7684addPage\u51fd\u6570\uff0c\u7531\u4e8e\u9700\u8981\u4fdd\u969c\u8f93\u51fa\u6587\u4ef6\u7684\u6709\u5e8f\u6027\uff0caddPage\u65e0\u6cd5\u907f\u514d\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u653e\u5f03\u4e86\u8fd9\u79cd\u65b9\u6cd5</p>"},{"location":"software_development/backend/project_review/#solution-3","title":"Solution 3\uff1a\u53ea\u8003\u8651\u4e24\u79cd\u60c5\u51b5","text":"<p>\u76f8\u5173\u4ee3\u7801\u5728<code>create_watermark</code></p> <p>\u76f8\u6bd4\u4e8e\u4e4b\u524d\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u6700\u540e\u4e3a\u4e86\u7f29\u77ed\u4e0b\u8f7d\u65f6\u95f4\u9009\u62e9\u4e86\u4e0d\u90a3\u4e48\u5168\u9762\u7684\u89e3\u6cd5\uff1a\u6211\u4eec\u6682\u65f6\u53ea\u8003\u8651\u4e24\u79cd\u60c5\u51b5\uff08\u4e66\u7c4dPDF\u548c\u666e\u901aPDF\uff09</p> <p>\u4e66\u7c4dPDF\u6709\u4e2a\u663e\u8457\u7279\u70b9\uff1a\u524d\u4e24\u9875\u4e3a\u5c01\u9762\u9875\uff0c\u9875\u9762\u6bd4\u8f83\u5927\uff1b\u540e\u9762\u4e3a\u5185\u5bb9\u9875\uff0c\u9875\u9762\u6bd4\u8f83\u5c0f</p> <p>\u666e\u901aPDF\u5219\u5168\u90e8\u9875\u9762\u5927\u5c0f\u90fd\u76f8\u540c</p> <p>\u56e0\u6b64\u6211\u4eec\u7528\u4ee5\u4e0b\u4ee3\u7801\u89e3\u51b3\u4ee5\u4e0a\u4e24\u79cd\u60c5\u51b5\uff1a</p> <p>\u6211\u4eec\u53ea\u53d6\u7b2c\u4e00\u9875\u548c\u7b2c\u4e09\u9875\uff0c\u5bf9\u5176\u5927\u5c0f\u8fdb\u884c\u6bd4\u8f83\uff0c\u53d6\u6700\u5c0f\u9875\u9762\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u6c34\u5370\u517c\u5bb9</p> <p>\u7531\u4e8e\u6c34\u5370\u6587\u4ef6\u53ea\u6709\u4e00\u9875\uff0c\u6240\u4ee5\u5927\u5927\u7f29\u77ed\u4e86\u52a0\u6c34\u5370\u7684\u65f6\u95f4</p> <pre><code># \u83b7\u5f97\u5c01\u9762\u9875\u5c3a\u5bf8\n    page = pdf_input.getPage(0)\n    page_width = float(page.mediaBox.getWidth())\n    page_height = float(page.mediaBox.getHeight())\n    pageSize=(page_width,page_height)\n\n    if pageNum &gt; 3:\n        page = pdf_input.getPage(0)\n        page_width = min(page_width,float(page.mediaBox.getWidth()))\n        page_height = min(page_height,float(page.mediaBox.getHeight()))\n        pageSize=(page_width,page_height)\n</code></pre>"},{"location":"software_development/backend/project_review/#solution-4-lru","title":"Solution 4: LRU\u4f18\u5316\u4e0b\u8f7d","text":"<p>\u6211\u4eec\u53d1\u73b0\u4e0b\u8f7d\u6587\u4ef6\u4e5f\u662f\u4e2a\u975e\u5e38\u8017\u65f6\u7684\u8fc7\u7a0b\uff0c\u4f46\u8fd9\u4e2a\u4e3b\u8981\u662f\u56e0\u4e3a\u7f51\u901f\u592a\u6162\u3002\u4e3a\u4e86\u4f18\u5316\u4e0b\u8f7d\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u9009\u62e9\u4f7f\u7528LRU\u7b97\u6cd5\u5b9e\u73b0\u4e0b\u8f7dAPI\u3002</p> <p>LRU\u539f\u7406\u5982\u4e0b\u94fe\u63a5\uff1a</p> <p>\u5168\u9762\u8bb2\u89e3LRU\u7b97\u6cd5-CSDN\u535a\u5ba2</p>"},{"location":"software_development/backend/project_review/#solution-5","title":"Solution 5: \u7b49\u4f60\u89e3\u51b3","text":"<p>\u770b\u770b\u540e\u6765\u4eba\u6709\u6ca1\u6709\u529e\u6cd5\u80fd\u591f\u66f4\u597d\u5730\u89e3\u51b3</p>"},{"location":"software_development/backend/project_review/#topic-2exception","title":"Topic 2\uff1a<code>Exception</code>","text":""},{"location":"software_development/backend/project_review/#problem","title":"Problem\uff1a","text":"<p>\u5982\u679c\u6309\u4e0b\u9762\u4ee3\u7801\u6267\u884c\uff0c\u4f1a\u51fa\u73b0\u76f4\u63a5\u89e6\u53d1<code>except Exception as e</code>\u4e2d\u7684<code>Exception</code>\uff0c\u5bfc\u81f4\u65e0\u6cd5\u663e\u793a\u6b63\u786e\u7684\u62a5\u9519\u4fe1\u606f</p> <pre><code>    try:\n            bucket_name = BUCKET_NAME\n            # \u8bfb\u53d6\u8981\u52a0\u6c34\u5370\u7684\u6587\u4ef6\n            pdf_data = minio_messenger.download(bucket_name, fuuid).read()\n            if pdf_data is None:\n                raise response_400(data='\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25') \n            pdf_size = len(pdf_data)\n\n            pdf_input = PdfFileReader(BytesIO(pdf_data), strict=False)\n            if pdf_input is None:\n                raise response_400(data='\u4e0b\u8f7d\u6587\u4ef6\u8bfb\u53d6\u5931\u8d25') \n\n            # \u7f16\u8f91\u6c34\u5370\u5185\u5bb9\n            mark_content = current_user.nickName+current_user.phone\n\n            if pdf_size &lt;= ignore_watermark*1024*1024:\n                # \u521b\u5efa\u6c34\u5370\n                create_watermark(pdf_input,mark_content,fuuid,current_user.SNo)                              \n                return response_200(data='\u6c34\u5370\u5df2\u6dfb\u52a0')\n            else:\n                # \u5bf9\u8f93\u51fa\u6587\u4ef6\u547d\u540d\n                output_filename = f'{fuuid}_{current_user.SNo}_output.pdf'\n                output_filepath = os.path.join(os.path.dirname(__file__), f'../../watermark/{output_filename}')\n                with open(output_filepath,'wb') as output_file:\n                    # \u5c06 PdfFileWriter \u4e2d\u7684\u9875\u9762\u5199\u5165\u5230 BytesIO \u5bf9\u8c61\n                    output_file.write(pdf_data)\n                return response_200(data='\u4e0d\u9700\u8981\u6dfb\u52a0\u6c34\u5370')\n    except Exception as e:\n        raise response_400(data = str(e))\n</code></pre> <p>\u4f8b\u5982\uff1a</p> <pre><code>pdf_data = minio_messenger.download(bucket_name, fuuid).read()\n    if pdf_data is None:\n       raise response_400(data='\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25') \n</code></pre> <p>\u5982\u679cdownload\u5931\u8d25\u4e0d\u4f1a\u8fd4\u56de\u9519\u8bef\u4fe1\u606f'\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25'\uff0c\u800c\u662f\u76f4\u63a5\u8fd4\u56de\u7cfb\u7edf\u81ea\u5df1\u62a5\u7684\u9519\u8bef\uff08\u901a\u5e38\u662f\u82f1\u6587\uff09\uff0c\u8868\u793a\u6ca1\u6709\u6210\u529fraise response</p>"},{"location":"software_development/backend/project_review/#solution","title":"Solution\uff1a","text":"<p>\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6355\u83b7\u81ea\u5b9a\u4e49<code>HTTPException</code>\u7684\u4ee3\u7801\uff0c\u5f53\u4ee3\u7801\u9047\u5230\u7279\u5b9a\u5224\u65ad\u65f6\uff0c\u4f1araise response\uff08response\u6838\u5fc3\u662f\u8fd4\u56de<code>HTTPException</code>\uff09\uff0c\u6240\u4ee5\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6355\u83b7response\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u8fd9\u4e2aresponse</p> <p>\u5982\u679c\u6309\u4e0a\u9762Problem\u7684\u5199\u6cd5\uff0c\u4f1a\u5bfc\u81f4<code>Exception</code>\u91cc\u9762\u6709<code>response_400</code>\uff0c\u81ea\u7136\u4e0d\u4f1a\u62a5<code>response_400</code></p> <pre><code>    # \u4e0d\u62e6\u622a\u81ea\u5b9a\u4e49\u7684HTTPException\n    except HTTPException as e:\n        raise e\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>    try:\n            bucket_name = BUCKET_NAME\n            # \u8bfb\u53d6\u8981\u52a0\u6c34\u5370\u7684\u6587\u4ef6\n            pdf_data = minio_messenger.download(bucket_name, fuuid).read()\n            if pdf_data is None:\n                raise response_400(data='\u4e0b\u8f7d\u6587\u4ef6\u5931\u8d25') \n            pdf_size = len(pdf_data)\n\n            pdf_input = PdfFileReader(BytesIO(pdf_data), strict=False)\n            if pdf_input is None:\n                raise response_400(data='\u4e0b\u8f7d\u6587\u4ef6\u8bfb\u53d6\u5931\u8d25') \n\n            # \u7f16\u8f91\u6c34\u5370\u5185\u5bb9\n            mark_content = current_user.nickName+current_user.phone\n\n            if pdf_size &lt;= ignore_watermark*1024*1024:\n                # \u521b\u5efa\u6c34\u5370\n                create_watermark(pdf_input,mark_content,fuuid,current_user.SNo)                              \n                return response_200(data='\u6c34\u5370\u5df2\u6dfb\u52a0')\n            else:\n                # \u5bf9\u8f93\u51fa\u6587\u4ef6\u547d\u540d\n                output_filename = f'{fuuid}_{current_user.SNo}_output.pdf'\n                output_filepath = os.path.join(os.path.dirname(__file__), f'../../watermark/{output_filename}')\n                with open(output_filepath,'wb') as output_file:\n                    # \u5c06 PdfFileWriter \u4e2d\u7684\u9875\u9762\u5199\u5165\u5230 BytesIO \u5bf9\u8c61\n                    output_file.write(pdf_data)\n                return response_200(data='\u4e0d\u9700\u8981\u6dfb\u52a0\u6c34\u5370')\n    # \u4e0d\u62e6\u622a\u81ea\u5b9a\u4e49\u7684HTTPException\n    except HTTPException as e:\n        raise e\n    # \u62e6\u622a\u9884\u6599\u4e4b\u5916\u7684\u5f02\u5e38\n    except Exception as e:\n        raise response_400(data = str(e))\n</code></pre>"},{"location":"software_development/backend/project_review/#topic-3es-search","title":"Topic 3\uff1a<code>ES search</code>","text":""},{"location":"software_development/backend/project_review/#problem-mustshould","title":"Problem: must\u548cshould\u51b2\u7a81","text":"<p>\u8fd9\u662f\u4e00\u5f00\u59cb\u7684\u5199\u6cd5</p> <p>\u6211\u4eec\u53d1\u73b0\u641c\u7d22\u7684\u65f6\u5019\u53ea\u6ee1\u8db3\u4e86must\u7684\u6761\u4ef6\uff0c\u800cshould\u4f3c\u4e4e\u88ab\u5ffd\u7565\u4e86</p> <pre><code>body = {\n                # \u5f53\u524d\u9875\u6570\u636e\u7684\u8d77\u59cb\u4f4d\u7f6e=\u9875\u7801\uff08\u4ece0\u5f00\u59cb\uff09*\u6bcf\u9875\u6570\u636e\u6761\u6570\n                \"from\": page*10,\n                # \u6bcf\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570\n                \"size\": 10, \n                \"query\": {\n                    \"bool\": {\n                        \"must\": [\n                            { \"term\": {\"fCate\": type } }\n                        ]                \n                        \"should\": [ \n                             { \"match\": {\"fName\": keyword } },\n                             { \"match\": {\"fIntro\": keyword } },\n                             { \"match\": {\"fTag\": keyword } }\n                        ]}\n                    }\n                }\n</code></pre> <p>\u67e5\u7f51\u53d1\u73b0\uff0cmust\u548cshould\u4e0d\u80fd\u540c\u7ea7\uff0c\u6b63\u5982<code>a==1&amp;&amp;b==1||b==2</code>\u4e0d\u80fd\u7528\u4e8e\u8868\u793a\u201c\u6ee1\u8db3a==1\u7684\u524d\u63d0\u4e0b\uff0cb\u53d61\u62162\u201d\uff0c\u800c\u662f\u6539\u4e3a<code>a==1&amp;&amp;(b==1||b==2)</code>\uff1b</p> <p>\u5373must\u548cshould\u4e0d\u80fd\u540c\u7ea7\u6b63\u5982&amp;&amp;\u548c||\u4e0d\u80fd\u540c\u7ea7</p>"},{"location":"software_development/backend/project_review/#solution_1","title":"Solution","text":"<pre><code>body = {\n                # \u5f53\u524d\u9875\u6570\u636e\u7684\u8d77\u59cb\u4f4d\u7f6e=\u9875\u7801\uff08\u4ece0\u5f00\u59cb\uff09*\u6bcf\u9875\u6570\u636e\u6761\u6570\n                \"from\": page*10,\n                # \u6bcf\u9875\u67e5\u8be2\u7684\u6570\u636e\u6761\u6570\n                \"size\": 10, \n                \"query\": {\n                    \"bool\": {\n                        \"must\": [\n                            { \"term\": {\"fCate\": type } },\n                            {\n                                \"bool\":{\n                                    \"should\": [ \n                                        { \"match\": {\"fName\": keyword } },\n                                        { \"match\": {\"fIntro\": keyword } },\n                                        { \"match\": {\"fTag\": keyword } }\n                                ]}\n                            }\n                        ]                \n                    }\n                }\n</code></pre>"}]}